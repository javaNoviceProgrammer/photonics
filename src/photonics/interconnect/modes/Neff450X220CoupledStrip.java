package photonics.interconnect.modes;

import flanagan.interpolation.CubicSpline;
import mathLib.func.ArrayFunc;
import mathLib.plot.MatlabChart;
import mathLib.util.MathUtils;

public class Neff450X220CoupledStrip implements NeffCoupled {

	final static double LAMBDA_MIN = 1500 ;
	final static double LAMBDA_MAX = 1600 ;

	@Override
	public double getNeffEven(double lambdaNm, double gapNm){
		double neffEven = Double.NaN ;
		double[] lambda_nm = MathUtils.linspace(LAMBDA_MIN, LAMBDA_MAX, 2.5) ;
		// step 1: find lambda_min and lambda_max interval
		int M = lambda_nm.length ;
		double lambdaMinInterval = Double.NaN ;
		double lambdaMaxInterval = Double.NaN ;
		int indexInterval = 0 ;
		for(int i=0; i<M-1; i++){
			if(lambdaNm>=lambda_nm[i] && lambdaNm<=lambda_nm[i+1]){
				lambdaMinInterval = lambda_nm[i] ;
				lambdaMaxInterval = lambda_nm[i+1] ;
				indexInterval = i ;
			}
		}
		double weightLeft = (lambdaNm-lambdaMinInterval)/(lambdaMaxInterval-lambdaMinInterval) ;
		double weightRight = 1 - weightLeft ;
		neffEven = (1-weightLeft)*getNeffFromDatabase(indexInterval, gapNm, "even") + (1-weightRight)*getNeffFromDatabase(indexInterval+1, gapNm, "even") ;

		return neffEven ;
	}

	public double[] getNeffEven(double lambdaNm, double[] gapNm){
		double[] neff = new double[gapNm.length] ;
		for(int i=0; i<neff.length; i++){
			neff[i] = getNeffEven(lambdaNm, gapNm[i]) ;
		}
		return neff ;
	}
	
	public double[] getNeffEven(double lambdaNm[], double gapNm){
		double[] neff = new double[lambdaNm.length] ;
		for(int i=0; i<neff.length; i++){
			neff[i] = getNeffEven(lambdaNm[i], gapNm) ;
		}
		return neff ;
	}

	@Override
	public double getNeffOdd(double lambdaNm, double gapNm){
		double neffEven = Double.NaN ;
		double[] lambda_nm = MathUtils.linspace(LAMBDA_MIN, LAMBDA_MAX, 2.5) ;
		// step 1: find lambda_min and lambda_max interval
		int M = lambda_nm.length ;
		double lambdaMinInterval = Double.NaN ;
		double lambdaMaxInterval = Double.NaN ;
		int indexInterval = 0 ;
		for(int i=0; i<M-1; i++){
			if(lambdaNm>=lambda_nm[i] && lambdaNm<=lambda_nm[i+1]){
				lambdaMinInterval = lambda_nm[i] ;
				lambdaMaxInterval = lambda_nm[i+1] ;
				indexInterval = i ;
			}
		}
		double weightLeft = (lambdaNm-lambdaMinInterval)/(lambdaMaxInterval-lambdaMinInterval) ;
		double weightRight = 1 - weightLeft ;
		neffEven = (1-weightLeft)*getNeffFromDatabase(indexInterval, gapNm, "odd") + (1-weightRight)*getNeffFromDatabase(indexInterval+1, gapNm, "odd") ;

		return neffEven ;
	}

	public double[] getNeffOdd(double lambdaNm, double[] gapNm){
		double[] neff = new double[gapNm.length] ;
		for(int i=0; i<neff.length; i++){
			neff[i] = getNeffOdd(lambdaNm, gapNm[i]) ;
		}
		return neff ;
	}
	
	public double[] getNeffOdd(double[] lambdaNm, double gapNm){
		double[] neff = new double[lambdaNm.length] ;
		for(int i=0; i<neff.length; i++){
			neff[i] = getNeffOdd(lambdaNm[i], gapNm) ;
		}
		return neff ;
	}

	// database of even and odd modes
	private double getNeffFromDatabase(int index, double gapNm, String mode){
		double neff = Double.NaN ;
		double[] gap = {50.0, 74.358974358974358974, 98.717948717948717949, 123.07692307692307692, 147.4358974358974359, 171.79487179487179487, 196.15384615384615385, 220.51282051282051282, 244.87179487179487179, 269.23076923076923077, 293.58974358974358974, 317.94871794871794872, 342.30769230769230769, 366.66666666666666667, 391.02564102564102564, 415.38461538461538462, 439.74358974358974359, 464.10256410256410256, 488.46153846153846154, 512.82051282051282051, 537.17948717948717949, 561.53846153846153846, 585.89743589743589744, 610.25641025641025641, 634.61538461538461538, 658.97435897435897436, 683.33333333333333333, 707.69230769230769231, 732.05128205128205128, 756.41025641025641026, 780.76923076923076923, 805.12820512820512821, 829.48717948717948718, 853.84615384615384615, 878.20512820512820513, 902.5641025641025641, 926.92307692307692308, 951.28205128205128205, 975.64102564102564103, 1000.0} ;
		if(index == 0){
			double[] nEven = {2.509633493998590037, 2.4807100199881095826, 2.4637116270553280906, 2.452686482224954112, 2.445108656913687728, 2.4396916692227184065, 2.4356902183870632328, 2.432679484755515098, 2.4303747653034948328, 2.428590681751800151, 2.4271976044327403521, 2.4260972433456879926, 2.4252286842746140216, 2.4245397802288910505, 2.423985987667018005, 2.423544123972614095, 2.4231899403510301916, 2.4229030308045520492, 2.4226763662448642656, 2.4224933880838368516, 2.4223423675762689733, 2.4222252690051004897, 2.4221262320544960644, 2.4220491434985405022, 2.4219848727490180806, 2.421936352186932595, 2.4218914111151290669, 2.4218584530986162484, 2.4218339901736753994, 2.4218097132316191988, 2.4217921128951238607, 2.4217776801143284793, 2.4217665938245960255, 2.4217576993024776399, 2.4217480528716985866, 2.421740376828170227, 2.4217360026144505447, 2.4217318313520430628, 2.4217279406430853861, 2.4217262537837282999} ;
			double[] nOdd = {2.3928538910328160938, 2.39596152207438573, 2.3992671279160955322, 2.4024945827208830096, 2.4054811781592038145, 2.4081460050441290122, 2.4104635545922694639, 2.4124442315384153623, 2.4141095177586415765, 2.4154986741150290541, 2.4166489952946141884, 2.4175912249905167073, 2.4183652950608074406, 2.418998029551298945, 2.4195097497574411527, 2.4199268763155523665, 2.4202654113264219227, 2.4205377583363376637, 2.4207626334469902751, 2.4209442713416291504, 2.42108820277317216, 2.4212095009013836489, 2.421303256455492825, 2.4213822227631425221, 2.4214442821100394809, 2.4214980281057871814, 2.4215359307090609242, 2.4215700759960241406, 2.421600005587091875, 2.4216198241025681526, 2.4216379731163981681, 2.4216525204344576672, 2.4216649438836324038, 2.4216751493519845795, 2.4216809785301429692, 2.4216858993008925083, 2.421691694176230758, 2.4216958396372487705, 2.4216986883813031994, 2.4217024534942881431} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 1){
			double[] nEven = {2.5072831052691735287, 2.4781806459623441086, 2.461057583601868437, 2.4499417073682137058, 2.442295745361549919, 2.436826330503057747, 2.4327835514169855458, 2.4297398213448899718, 2.4274084122214878434, 2.4256025380838197592, 2.4241915489129408634, 2.4230763660838059437, 2.4221955121513540909, 2.4214963886903131396, 2.4209340449665743833, 2.4204850481862449918, 2.4201249034031837581, 2.4198329881895359605, 2.4196021615879907962, 2.4194156971075768681, 2.4192617411373960046, 2.4191422153059547462, 2.4190411244494978149, 2.4189623289702235631, 2.4188966301982830487, 2.4188469312979545833, 2.4188009742078699915, 2.4187671926335010397, 2.4187420444334981617, 2.4187171765529060785, 2.4186990969987371969, 2.4186842642213486343, 2.4186728445126988163, 2.4186636738828024562, 2.4186537913271739519, 2.4186459141157876651, 2.4186413815842575659, 2.418637075723968799, 2.4186330769661941176, 2.4186313133726318192} ;
			double[] nOdd = {2.3895108705742047484, 2.3926298785296187255, 2.3959510138620925268, 2.3991966579944117299, 2.4022027804784937821, 2.4048874006630125422, 2.4072242085646360366, 2.409223057101881782, 2.4109050639272151528, 2.4123093319414370406, 2.4134731140068872435, 2.414427170824038793, 2.4152115556299946775, 2.4158532156551673076, 2.4163725917191762882, 2.4167962717669215778, 2.4171403873497339099, 2.4174174569431134962, 2.417646350252973253, 2.4178313795284585019, 2.4179781564431519492, 2.4181018591227547709, 2.418197617458812676, 2.4182782775045792434, 2.4183417474541504255, 2.4183966984873350725, 2.4184355716646463996, 2.4184705497230258864, 2.4185011846240676014, 2.4185215668956581148, 2.4185401973764122374, 2.4185551482527363198, 2.4185679073334207523, 2.4185783900685802195, 2.4185844465473369524, 2.4185895510793868901, 2.4185955131135550289, 2.4185997851743588072, 2.4186027462915244968, 2.4186066068335554391} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 2){
			double[] nEven = {2.5049359745298387381, 2.4756543485177249231, 2.4584062596394362643, 2.447199263940974312, 2.439484803512065092, 2.4339626306911230635, 2.4298782344364058261, 2.4268012398237539529, 2.4244429180863527051, 2.4226150526073899627, 2.4211859770540411496, 2.4200558166646466418, 2.4191625257768514246, 2.4184530594954494198, 2.4178820644632623704, 2.4174258366783116792, 2.4170596468431764237, 2.4167626540389437473, 2.416527602165448485, 2.4163375962434701094, 2.4161806599574715548, 2.4160586563478632094, 2.4159554759610539776, 2.4158749407121562491, 2.4158077805911455371, 2.4157568866044147882, 2.4157098934771177312, 2.4156752649945323341, 2.4156494241330741524, 2.4156239497124403215, 2.4156053778967909729, 2.4155901343188865837, 2.4155783723277015618, 2.4155689194498091155, 2.4155587933594566685, 2.4155507159133859929, 2.4155460172059521895, 2.4155415717426009792, 2.4155374586198252729, 2.4155355939152598488} ;
			double[] nOdd = {2.3861652264048318628, 2.3892956008192194339, 2.3926322768750321046, 2.3958961498410338287, 2.3989218658186635125, 2.4016263684124874445, 2.4039825280885502856, 2.4059996588711309862, 2.4076985037978912985, 2.4091180001333385441, 2.4102953617517823837, 2.4112613597025247536, 2.4120561606110855202, 2.4127068439980536851, 2.4132339717616781982, 2.4136642848320954968, 2.414014055837135686, 2.4142959148454870011, 2.4145288902953470078, 2.4147173620220399037, 2.4148670261355005273, 2.4149931800182633523, 2.4150909773326496577, 2.4151733638834036455, 2.4152382777293466276, 2.4152944486543788116, 2.4153343165487428656, 2.4153701450708715548, 2.4154014983050147158, 2.4154224575082388071, 2.4154415828051356563, 2.4154569462559969395, 2.4154700471451708843, 2.4154808217857532959, 2.4154871088688576464, 2.415492404569133722, 2.4154985304704692517, 2.415502940212356453, 2.4155060143321360755, 2.4155099772475798758} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 3){
			double[] nEven = {2.5025921153172268063, 2.4731311427304882855, 2.4557576765998865298, 2.4444591849751415857, 2.4366758568185411526, 2.4311005927878923671, 2.4269742846021071792, 2.4238637715834818742, 2.4214783054678972185, 2.4196282425941153527, 2.4181809051667180199, 2.417035606863060071, 2.4161297441542082254, 2.4154098152461638271, 2.4148300574648988714, 2.4143665047559004222, 2.4139941829300082254, 2.413692043337611004, 2.4134527004382548832, 2.413259100007261182, 2.4130991298107407061, 2.4129746074704945258, 2.4128692988268123365, 2.4127869951747689115, 2.4127183461174186441, 2.4126662251479222832, 2.4126181753039670497, 2.4125826805557806232, 2.4125561291404178377, 2.4125300382461238868, 2.4125109636728305773, 2.4124952985518643978, 2.4124831884218993494, 2.4124734483193144285, 2.4124630703564524659, 2.4124547775811189254, 2.4124499039924582888, 2.4124453261791534153, 2.4124410975350656372, 2.4124391418617698868} ;
			double[] nOdd = {2.3828169556651763727, 2.3859586818440980949, 2.3893109167930979275, 2.3925930638707382236, 2.3956384355744488879, 2.3983628986577238962, 2.4007385158963781002, 2.4027740382755764514, 2.4044898341688707433, 2.4059246754985070815, 2.4071157329628691812, 2.4080937815397422952, 2.4088991097982561662, 2.4095589161850567983, 2.4100938826629212386, 2.4105309180554970183, 2.4108864184967204736, 2.4111731360709680594, 2.4114102513141992823, 2.4116022217097339286, 2.4117548170805531704, 2.4118834660592605168, 2.4119833442770897136, 2.4120674853029564488, 2.4121338665903366838, 2.4121912887358480937, 2.4122321701598612442, 2.4122688659801716504, 2.412300954350869997, 2.4123225050632082223, 2.4123421350885436709, 2.4123579212604711053, 2.4123713768084491527, 2.4123824424695299307, 2.4123889727570078101, 2.4123944608874681172, 2.4124007575271306791, 2.4124053072055646751, 2.4124085000602897289, 2.4124125667587601463} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 4){
			double[] nEven = {2.5002515263532369971, 2.470611048652538333, 2.4531118543299621493, 2.4417214788177226126, 2.4338689269550024541, 2.4282402451021640744, 2.4240717303782539638, 2.4209274376793112893, 2.418514594285810837, 2.4166421378816878018, 2.4151763559294816552, 2.4140157629827809771, 2.413097189580740487, 2.4123666722016889885, 2.4117780434828977043, 2.4113070703711714238, 2.4109285347489914919, 2.4106211719029153606, 2.41037747342704467, 2.4101802212496190592, 2.4100171626777813216, 2.4098900804808747189, 2.4097826059559417367, 2.4096984960622243044, 2.4096283345963644962, 2.4095749614981691877, 2.4095258335685794115, 2.409489461593408155, 2.4094621787404615354, 2.4094354526352055323, 2.4094158624943093905, 2.4093997665395363583, 2.4093873002024590591, 2.4093772567899729431, 2.4093666275808947042, 2.4093581197987932185, 2.4093530841853372237, 2.4093483492341296603, 2.4093439972264576454, 2.4093419432983442796} ;
			double[] nOdd = {2.3794660501163185096, 2.3826191194307924093, 2.3859869258682770976, 2.389287382932095305, 2.3923524784882657102, 2.3950969882383725817, 2.3974921583897592647, 2.3995461801470137075, 2.4012790479892180961, 2.4027293554342015192, 2.4039342222760504697, 2.4049244373239826444, 2.4057403981582012875, 2.4064094289892676848, 2.4069523251626216975, 2.4073961643036922986, 2.4077574727382873299, 2.4080491193206650102, 2.4082904355944139141, 2.4084859574428487683, 2.4086415326581991359, 2.4087727207555271747, 2.4088747157679262223, 2.4089606431023358191, 2.4090285239963300512, 2.4090872193352415032, 2.4091291335667941453, 2.4091667169530435189, 2.4091995575581481859, 2.4092217168754679335, 2.4092418612317496596, 2.4092580790877478059, 2.4092718966825006355, 2.409283263404157438, 2.4092900407682606989, 2.409295730762197163, 2.4093022005552255926, 2.4093068959052952316, 2.4093102077593129273, 2.409314384005831311} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 5){
			double[] nEven = {2.4979142135349068354, 2.4680940696199300532, 2.4504688109932142304, 2.4389861809597257469, 2.4310640397899665466, 2.4253816118803310786, 2.4211705982277855753, 2.4179922619848692733, 2.4155518138687464003, 2.4136567595201312564, 2.4121723548563540618, 2.4109963060162256099, 2.4100648800604154154, 2.409323651912260722, 2.4087260407506927429, 2.408247549515112329, 2.4078627155585228259, 2.4075500542905747814, 2.4073019332467580078, 2.4071009726682595087, 2.4069347750314644685, 2.4068050898424000472, 2.406695411329256018, 2.4066094642948687721, 2.4065377526786217999, 2.4064831070810908109, 2.4064328776836934054, 2.4063956028797535147, 2.4063675783646960582, 2.4063402086506888722, 2.4063200859042890301, 2.406303551288185627, 2.4062907146724623608, 2.4062803658162437159, 2.4062694758239278059, 2.4062607469264909454, 2.406255526819998547, 2.4062506505266463286, 2.4062461729283044498, 2.4062440227053865094} ;
			double[] nOdd = {2.376112509663694361, 2.3792769094826242693, 2.3826603013674643172, 2.3859791098224945038, 2.3890639898393737361, 2.3918286280236795704, 2.3942434539905650404, 2.3963160876990796666, 2.3980661392932005604, 2.3995320263057111632, 2.4007508268391428707, 2.4017533210480443984, 2.4025800211634225079, 2.4032583756060570401, 2.4038092972727498342, 2.4042600280171808613, 2.4046272203241674248, 2.4049238631827303259, 2.405169446898876906, 2.4053685727862839094, 2.4055271793682586612, 2.4056609478675787805, 2.4057650935752725729, 2.405852843550148279, 2.4059222523403431815, 2.4059822446742380464, 2.4060252180049288562, 2.406063702762176959, 2.4060973159348271189, 2.4061200913808895585, 2.4061407670198211584, 2.4061574259230078532, 2.4061716153921519634, 2.4061832916010108541, 2.4061903217427853541, 2.4061962216684800175, 2.4062028763500511452, 2.4062077144590907629, 2.4062111486946866634, 2.4062154345614494844} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 6){
			double[] nEven = {2.49558018318618835, 2.4655802308986665139, 2.4478285682404279378, 2.4362533097865268772, 2.4282612192851056321, 2.4225247203776181237, 2.4182709132546875708, 2.4150582738776273928, 2.4125899933370131833, 2.4106721310690617521, 2.4091689217940674972, 2.4079772580833189721, 2.4070328392175670551, 2.4062807733362672202, 2.4056740721386207227, 2.4051879625669294605, 2.4047967444511924029, 2.4044787081260801109, 2.404226100056915616, 2.40402136946614986, 2.4038519785116094774, 2.4037196483152425408, 2.4036077261506645364, 2.4035199076842106436, 2.4034466245489278791, 2.4033906751440774485, 2.4033393242838396731, 2.4033011268548793993, 2.4032723393864174888, 2.4032443083538828077, 2.4032236510120088546, 2.4032066589170417714, 2.4031934459051185193, 2.4031827782872436927, 2.4031716245533765175, 2.403162666228081612, 2.4031572686334077282, 2.4031522256721964403, 2.4031476281287043051, 2.4031453786554699548} ;
			double[] nOdd = {2.3727563286286139643, 2.3759320474267435763, 2.3793310396721172317, 2.3826682372752805428, 2.3857729660466060473, 2.3885578164200538254, 2.3909923922159519449, 2.3930837477905462229, 2.3948510995720870831, 2.3963326958128545741, 2.397565541514724341, 2.3985804267094619213, 2.3994179783808724515, 2.4001057576355226963, 2.4006648026929608974, 2.4011225064856542843, 2.4014956607461095395, 2.4017973715396720991, 2.4020472793338334405, 2.4022500720218076253, 2.4024117480907407618, 2.4025481487380426771, 2.4026544850959878907, 2.4027440898607062003, 2.4028150541131383378, 2.4028763733143700954, 2.4029204265070021052, 2.4029598382580461546, 2.4029942326350823834, 2.4030176507984459811, 2.4030388603672836467, 2.4030559701389910821, 2.4030705418015743113, 2.4030825367789345748, 2.4030898275946754872, 2.4030959374028735276, 2.4031027783972658263, 2.4031077670482305919, 2.4031113323191228837, 2.4031157262758604531} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 7){
			double[] nEven = {2.4932494350758891422, 2.4630695353885276866, 2.4451911445384837407, 2.4335228846256677926, 2.4254604925935470128, 2.4196695941455654832, 2.4153726962873229844, 2.4121254968022838305, 2.4096291488739325359, 2.4076882778020620712, 2.4061660820042587439, 2.4049586424059850032, 2.4040010867004868444, 2.4032380584955914671, 2.4026221529917286546, 2.4021283327123383877, 2.4017306397494646575, 2.4014071523036677469, 2.4011499881790143718, 2.4009414287017940559, 2.4007688008874539243, 2.4006337713102765541, 2.4005195650119732775, 2.4004298422167154037, 2.4003549541335607032, 2.4002976760443162085, 2.4002451761985050815, 2.4002060460752043802, 2.4001764758583705728, 2.4001477694938349039, 2.4001265556820006175, 2.4001091036626953645, 2.4000955042138136797, 2.4000845206271557153, 2.4000730858651913024, 2.4000638919058037146, 2.4000583036742271226, 2.400053109189419942, 2.4000483735294491083, 2.4000460190438821506} ;
			double[] nOdd = {2.3693975056211820096, 2.3725845305150707887, 2.3759991338919377313, 2.379354759200314362, 2.3824793992209594151, 2.3852845462185734426, 2.3877389757629945422, 2.3898491633286287339, 2.3916339336575687113, 2.3931313496503401339, 2.3943783611861793048, 2.3954057548790745891, 2.3962542657002958713, 2.396951574930193285, 2.3975188370329036935, 2.397983599068327365, 2.3983627939279168473, 2.3986696429105234252, 2.3989239401897441972, 2.3991304547502680933, 2.3992952751402096823, 2.399434328263849725, 2.3995428960874960467, 2.3996343845459362498, 2.3997069385117519857, 2.3997696085279600631, 2.3998147627222397027, 2.3998551177856559669, 2.3998903176174728458, 2.3999143754144673935, 2.3999361447565497052, 2.3999537232146965771, 2.399968682152896271, 2.399981008397118476, 2.3999885590813128111, 2.3999948884388779824, 2.4000019240889032268, 2.4000070329791980406, 2.4000107626316449227, 2.4000152755239132496} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 8){
			double[] nEven = {2.4909219810560871977, 2.4605620035135733481, 2.4425565618356523956, 2.4307949338918528603, 2.4226618888707478483, 2.4168162610839845073, 2.4124759868990115486, 2.4091939567933358113, 2.4066693132269039168, 2.404705223147270754, 2.4031638590367858654, 2.4019404832221256108, 2.4009696469610140035, 2.4001955301546864519, 2.3995703055481794053, 2.3990686698963847867, 2.398664417413016281, 2.3983354030484131947, 2.3980736154955306638, 2.3978611648598042727, 2.3976852594570341459, 2.397547477767348223, 2.3974309473931962877, 2.3973392797472765636, 2.3972627506773367401, 2.3972041233271217386, 2.3971504531857563691, 2.3971103582809538679, 2.3970799975319962982, 2.3970506014785102344, 2.3970288251104192589, 2.3970108932472657948, 2.3969968788130939785, 2.3969855790735210554, 2.3969738670924685131, 2.3969644301828338939, 2.3969586518477030701, 2.3969532916213740492, 2.3969484222060919443, 2.3969459620062520955} ;
			double[] nOdd = {2.3660360396086890233, 2.3692343505239268353, 2.3726645812172040273, 2.3760386755301201589, 2.3791832894099118612, 2.3820088133758110516, 2.3844831906863728221, 2.3866123227715383415, 2.3884146350051866925, 2.3899279884051596312, 2.3911892861572923152, 2.3922293018150155852, 2.3930888798312714982, 2.3937958200562401423, 2.3943713920863043398, 2.3948433037610845631, 2.3952286201363204299, 2.395540677568223753, 2.395799429544947845, 2.3960097192994824766, 2.3961777212520671831, 2.3963194889950418798, 2.3964303290806419078, 2.3965237442843361215, 2.3965979106038695079, 2.3966619582365926711, 2.3967082344908465785, 2.3967495568198655675, 2.396785573578277706, 2.3968102949657437151, 2.3968326265417796428, 2.3968506879609714488, 2.396866046028178765, 2.3968787000005602472, 2.3968865318106140627, 2.3968930827120367155, 2.3969003112574149839, 2.3969056175570080391, 2.3969094506305701486, 2.3969140809281217486} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 9){
			double[] nEven = {2.4885978164261226553, 2.4580576502154860563, 2.4399248382938427682, 2.4280694897649479636, 2.4198654250666313814, 2.4139647479675359065, 2.4095807953140071511, 2.4062636822619496435, 2.4037105013391300012, 2.4017229904345378522, 2.4001622776330631126, 2.3989228025546474043, 2.397938541606510654, 2.3971532057298494678, 2.3965185513058115951, 2.3960089985114390032, 2.3955981026873209849, 2.3952634764993971928, 2.3949969955012169187, 2.3947806000068152521, 2.3946013453778745017, 2.3944607761865883688, 2.3943418792825896801, 2.3942482367411730415, 2.3941700439530322342, 2.3941100310476177704, 2.3940551684847179992, 2.3940140927545563443, 2.3939829184437591003, 2.3939528153083169393, 2.3939304532723979513, 2.3939120431949962864, 2.3938976415108546014, 2.3938859819116142802, 2.3938739799227959359, 2.3938642972296735323, 2.393858321615479845, 2.393852779288523358, 2.3938477840944378805, 2.3938452115801815978} ;
			double[] nOdd = {2.3626719275216703231, 2.3658815138546112067, 2.3693273761609483508, 2.3727199823806572887, 2.3758846273675224836, 2.3787306135450547728, 2.381225041092483341, 2.383373223412533104, 2.3851931825556786926, 2.3867226018924236897, 2.3879983060614180523, 2.3890510626573981945, 2.389921818353330174, 2.3906384951430719177, 2.391222473426139139, 2.3917016245599769242, 2.3920931410799650685, 2.3924104808741502026, 2.3926737540749907218, 2.39288787521804025, 2.3930591067560023077, 2.3932036371333982316, 2.3933167804236923359, 2.3934121600705657862, 2.3934879726111755183, 2.3935534242898426349, 2.3936008493116003315, 2.3936431569126250807, 2.3936800109127633895, 2.3937054106940487408, 2.3937283268598572583, 2.3937468703760225175, 2.3937626320189795415, 2.3937756345039291617, 2.3937837474846683783, 2.3937905332182354279, 2.3937979620535654313, 2.3938034337350324599, 2.3938074098837582859, 2.393812160572315495} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 10){
			double[] nEven = {2.4862769531011212898, 2.4555564852253319863, 2.4372959957049125101, 2.4253465614595626221, 2.4170711338291686054, 2.4111150811639960878, 2.4066871631361119732, 2.4033346985262675766, 2.4007527541609614552, 2.3987416111781745265, 2.3971613615104514494, 2.3959056210557791999, 2.3949077920840258216, 2.3941111086116761975, 2.393466908758528966, 2.3929493461786033315, 2.3925317039457811852, 2.3921913969877079964, 2.39192015126758184, 2.3916997409843738787, 2.3915170801462366512, 2.3913736835222554333, 2.3912523862707932842, 2.3911567237974762357, 2.3910768328637819202, 2.3910154119723219246, 2.3909593337648158418, 2.3909172550054202944, 2.3908852478252882179, 2.3908544247703944485, 2.3908314689777174777, 2.390812559160582218, 2.3907977430135960439, 2.3907857351413919211, 2.3907734361733590234, 2.3907634994805984086, 2.390757321670583746, 2.3907516171370430946, 2.390746466145990734, 2.3907437773659045988} ;
			double[] nOdd = {2.3593051686452124471, 2.3625260107667358511, 2.3659875247970498791, 2.3693986707044620843, 2.3725834101029317225, 2.375449939597705562, 2.3779645122176717997, 2.3801318612076607373, 2.3819695919383572225, 2.3835151944366130827, 2.3848054240371006074, 2.3858710348575016269, 2.3867530826841507618, 2.3874795986487793442, 2.3880720818472616074, 2.3885585585142639076, 2.388956356174449791, 2.3892790514876280916, 2.3895469070988060167, 2.3897649231582884788, 2.3899394343027573484, 2.3900867772625740137, 2.3902022679141219363, 2.3902996421541407024, 2.3903771329731000606, 2.3904440153743875541, 2.3904926126306067502, 2.3905359297988293399, 2.3905736362129297312, 2.3905997307875885838, 2.3906232470615931263, 2.3906422832276255086, 2.3906584706465814349, 2.3906718161318440963, 2.3906802186027831247, 2.3906872392181370834, 2.3906948783946715409, 2.39070051935017025, 2.3907046339660613654, 2.3907095147955614856} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 11){
			double[] nEven = {2.4839593897720773086, 2.4530585253863455009, 2.4346700538574901351, 2.4226261774481927525, 2.4142790392253123954, 2.4082672892832439615, 2.4037951071372303247, 2.4004070350228818853, 2.3977960903098014533, 2.3957611088972998736, 2.394161136945790247, 2.3928889688205989827, 2.3918774193122751548, 2.3910692610839414662, 2.3904154053359931709, 2.3898897220918358109, 2.389465250898633375, 2.389119175384874616, 2.3888430963900164627, 2.3886186207832236228, 2.3884324960849641073, 2.3882862221123559721, 2.3881624702203194666, 2.3880647589422152599, 2.3879831394100237141, 2.3879202807715467216, 2.3878629587359441189, 2.3878198570024515845, 2.3877869996057952129, 2.3877554402048897231, 2.3877318794476978248, 2.3877124580739077508, 2.3876972154275644122, 2.3876848531839707235, 2.3876722484465671137, 2.3876620166759203734, 2.3876556642218704773, 2.3876497802071532384, 2.3876444803272995898, 2.3876416782006009143} ;
			double[] nOdd = {2.3559357577678605722, 2.3591678423449882196, 2.3626450135399377217, 2.3660747401876407459, 2.3692796376071543207, 2.3721667899791376577, 2.3747016095913084932, 2.3768882306578209551, 2.3787438516764112251, 2.3803057583677054154, 2.3816106330576181094, 2.3826892168865563271, 2.383582667582129222, 2.3843191298784978116, 2.3849202129420459251, 2.3854141065324125925, 2.3858182668992515829, 2.386146391519351706, 2.3864189034002163403, 2.3866408668655685332, 2.386818718245820925, 2.3869689102998816743, 2.3870867927627337224, 2.38718619916058028, 2.3872653995221404521, 2.3873337412078869946, 2.3873835343533627018, 2.3874278723676169989, 2.387466457742259518, 2.3874932613953641081, 2.3875173896149921582, 2.3875369332199603001, 2.3875535497290680809, 2.3875672587368668154, 2.3875759548384896114, 2.3875832198595787759, 2.3875910709450605118, 2.3875968850337248028, 2.387601149444078974, 2.3876061583342522709} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 12){
			double[] nEven = {2.481645133165738315, 2.4505637853957815686, 2.4320470346382054849, 2.4199083665130323162, 2.4114891687250703534, 2.4054213966672226555, 2.4009046645007692256, 2.3974807160606461665, 2.3948405345827330493, 2.3927815071365632349, 2.3911616281111860438, 2.3898728672073068502, 2.3888474554999743482, 2.3880276903190220672, 2.3873640533835791544, 2.3868301519734052007, 2.3863987570381666181, 2.3860468351952812682, 2.3857658517260049713, 2.3855372370792138348, 2.3853476119037662073, 2.3851983986713780617, 2.3850721583975151852, 2.3849723582153208312, 2.3848889757558824343, 2.3848246471885015119, 2.38476606214670106, 2.384721917240153477, 2.3846881936816437531, 2.3846558786530174245, 2.3846316917451311213, 2.3846117512518483217, 2.3845960726847343913, 2.3845833440846586626, 2.3845704246194876497, 2.3845599642119479356, 2.3845533602038320176, 2.3845472958505586902, 2.3845418429782863079, 2.3845389180290879061} ;
			double[] nOdd = {2.3525636968979859454, 2.3558070038460146023, 2.3592998433424670068, 2.3627481850073133174, 2.3659733028157408086, 2.368881160592777313, 2.3714363236846236482, 2.3736423328456215387, 2.3755159576429001334, 2.3770942898189963977, 2.3784139307384153383, 2.3795056075193259382, 2.3804105726017525946, 2.3811570847994563138, 2.3817668697480924855, 2.3822682695922594576, 2.382678875916853567, 2.3830125039877319004, 2.38328973459473481, 2.3835157141658069868, 2.3836969549728781459, 2.3838500411560068493, 2.3839703572643045071, 2.3840718311108788363, 2.3841527741734656054, 2.3842226047208705531, 2.3842736195400560106, 2.3843190074284859037, 2.384358480909093192, 2.3843860123410922647, 2.3844107555266207399, 2.3844308275044814316, 2.3844478848846364372, 2.3844619617753530783, 2.3844709638938748064, 2.3844784820421009996, 2.3844865491546838321, 2.3844925433931796199, 2.3844969567882241535, 2.3845021031046949034} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 13){
			double[] nEven = {2.4793341864387405948, 2.4480722728704624735, 2.4294269540773369975, 2.4171931516219005154, 2.408701548039701823, 2.4025774354420792456, 2.3980158562887083917, 2.3945557682551901202, 2.3918861192629190526, 2.3898028361217287241, 2.3881628616422605482, 2.3868573398858980994, 2.3858179166756432465, 2.3849864117135042285, 2.3843128863598503919, 2.3837706545996901752, 2.3833322507221010866, 2.3829743997952146373, 2.3826884392426710413, 2.3824556225821629241, 2.3822624304740167567, 2.3821102382991043989, 2.3819814635421638904, 2.3818795371378382875, 2.3817943566635224606, 2.3817285371419254503, 2.3816686566070339737, 2.3816234459228722287, 2.3815888359372543448, 2.3815557460439875648, 2.3815309272938653962, 2.381510452875571282, 2.3814943260867722508, 2.3814812235293145726, 2.3814679836529744072, 2.3814572485642453437, 2.3814504232153694829, 2.3814441672088859647, 2.3814385606379024907, 2.3814355077972964025} ;
			double[] nOdd = {2.3491889848694991194, 2.352443501145073057, 2.3559520162331555326, 2.359419007940309676, 2.3626644038980937346, 2.3655930480988152098, 2.3681686540436457378, 2.3703941555316156986, 2.3722859080739371329, 2.3738807858638231174, 2.3752153153558168697, 2.3763202028842167479, 2.3772367953973496668, 2.3779934675551297474, 2.3786120471274534438, 2.379121048112279535, 2.3795381856577400015, 2.3798773921311551227, 2.3801594080942831688, 2.3803894595112105037, 2.3805741447770474295, 2.3807301809240306589, 2.3808529700931488904, 2.3809565483159742527, 2.3810392667313231563, 2.3811106135359008107, 2.381162872437957656, 2.3812093315357141243, 2.3812497178342248993, 2.3812779900229203989, 2.3813033714372666694, 2.3813239756264112934, 2.3813414868709688044, 2.3813559411620541795, 2.3813652564543592582, 2.3813730292679098355, 2.3813813224768476395, 2.3813875010615839223, 2.3813920733790991946, 2.3813973525533222997} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 14){
			double[] nEven = {2.4770265510728006753, 2.4455840101075096982, 2.4268098364941663725, 2.4144805557069930479, 2.4059162061754513218, 2.3997354318376502569, 2.3951287130791261148, 2.3916322234317011208, 2.3889328729868291035, 2.3868251214225271184, 2.3851648653824635282, 2.3838424164975382524, 2.3827888300303041724, 2.3819454558064809824, 2.3812619151173932686, 2.3807112596529473869, 2.3802657491220671204, 2.379901883632402626, 2.379610873726813125, 2.379373794377927176, 2.3791769777379081496, 2.3790217551472112589, 2.3788904021327805793, 2.3787863099265114109, 2.3786993009723049752, 2.3786319572013265855, 2.3785707574406922404, 2.3785244571391856994, 2.378488939587217299, 2.3784550660309169423, 2.3784296031784948333, 2.3784085735674422857, 2.3783919886925799503, 2.3783785001568986672, 2.3783649323140747534, 2.378353915120684281, 2.3783468457442760169, 2.3783404153234610767, 2.3783346495765913531, 2.3783314707587224213} ;
			double[] nOdd = {2.345811621879155151, 2.3490773259687558472, 2.3526015232894459395, 2.3560872033052158159, 2.3593529366560015426, 2.3623024482719019446, 2.3648985966570919004, 2.3671437052825234915, 2.3690536997171078859, 2.3706652442165196959, 2.3720147848136492463, 2.3731330006553186251, 2.3740613363301550365, 2.3748282728932577079, 2.3754557542960790251, 2.3759724423350108147, 2.3763961929154535646, 2.3767410555308887687, 2.3770279262767886053, 2.3772621155999851261, 2.3774503001544911029, 2.3776093301418943504, 2.3777346293123620136, 2.3778403563688517153, 2.3779248836820983115, 2.3779977755765928649, 2.3780513043873616752, 2.3780988577982573595, 2.3781401744971333301, 2.3781692078188867434, 2.3781952364655709609, 2.3782163934667752692, 2.3782343635334028953, 2.3782492063634474988, 2.3782588418065606639, 2.3782668783762086484, 2.3782754062700868225, 2.378281771987215798, 2.3782865054151933748, 2.3782919322766007397} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 15){
			double[] nEven = {2.474722234304159052, 2.4430990030425858706, 2.4241957029134599821, 2.4117706047347660103, 2.4031331675228240208, 2.3968954114484977147, 2.392243263671139708, 2.3887101116183608873, 2.385980820879432418, 2.3838483921340256622, 2.3821676650687986232, 2.3808281208099653092, 2.3797602242475632828, 2.3789048439874149743, 2.3782111760664963462, 2.3776519816213386171, 2.3771992689337082538, 2.3768293097971699979, 2.376533176843148798, 2.3762917676578769743, 2.3760912714543636071, 2.3759329669711912736, 2.3757989902122496062, 2.3756926955661112899, 2.3756038203913871776, 2.3755349237063883017, 2.3754723810201516798, 2.3754249708879666692, 2.3753885269766166211, 2.3753538473972160006, 2.3753277109513466492, 2.3753061288041967813, 2.3752890752062589819, 2.3752751920705641453, 2.3752612855470829345, 2.3752499869783068043, 2.3752427020368100941, 2.3752360508385739202, 2.3752301187485205247, 2.3752268044567239613} ;
			double[] nOdd = {2.3424316059128629242, 2.3457084722828049905, 2.3492483663030818697, 2.3527527661286353755, 2.3560388977112491915, 2.359009360073793804, 2.3616261456954994458, 2.3638909724490098085, 2.3658193263256528382, 2.3674476634686207888, 2.3688123376771792472, 2.3699439997294180493, 2.3708841936576114939, 2.3716615029096685952, 2.3722979842869040823, 2.3728224569469582583, 2.3732529039498366785, 2.3736034990335501682, 2.373895295228795721, 2.3741336784150979256, 2.3743254153547970198, 2.3744874915738019006, 2.374615360478927073, 2.3747232632094856797, 2.3748096309172348484, 2.3748840966774729111, 2.3749389261138147411, 2.3749875938956703791, 2.3750298599083263795, 2.3750596720560905872, 2.3750863653789071606, 2.3751080813195524222, 2.3751265254738949118, 2.3751417656608495577, 2.37515172939485808, 2.3751600392754501634, 2.3751687964014611687, 2.3751753627059812857, 2.3751802625741467168, 2.3751858288367535543} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 16){
			double[] nEven = {2.4724212444362754226, 2.4406172723033958682, 2.4215845727395932663, 2.4090633179839158196, 2.4003524615902103179, 2.3940574070193942902, 2.3893595400699263465, 2.385789458204407687, 2.3830299908588710167, 2.3808726715180719147, 2.379171289313183113, 2.3778144776346303857, 2.3767321199961655154, 2.375864601423351985, 2.375160681434990817, 2.374592845302551769, 2.3741328367547254174, 2.3737567020736571877, 2.3734553699584517439, 2.3732095662571506267, 2.373005327948505272, 2.3728438935937510301, 2.3727072486731679568, 2.3725987118029436829, 2.3725079357836387217, 2.3724374543000967819, 2.3723735428900347699, 2.3723249985766066139, 2.3722876038237536989, 2.3722521032419887632, 2.3722252879916050361, 2.3722031324671828401, 2.3721855974626513408, 2.3721713086542322024, 2.3721570582298658891, 2.3721454639942800569, 2.3721379349196718422, 2.3721310848682617411, 2.3721249784735349841, 2.3721215305276723839} ;
			double[] nOdd = {2.3390489422704416889, 2.3423369590892262337, 2.345892546012532609, 2.3494157115838110172, 2.352722286820727593, 2.355713777845068968, 2.3583513020421960071, 2.3606359539213719323, 2.3625827903389091666, 2.3642280400820445685, 2.3656079695858331924, 2.3667531987157288675, 2.3677053652640598358, 2.3684931589263391594, 2.3691387404092738578, 2.3696710910182599008, 2.3701083204604245225, 2.3704647263170293137, 2.3707615185138739555, 2.3710041599620983455, 2.3711995066493773976, 2.3713646789881139831, 2.3714951491158844377, 2.371605275616921471, 2.3716935184146730187, 2.3717695901006927706, 2.3718257409021394899, 2.3718755476647510605, 2.371918784916752454, 2.3719493895778160919, 2.3719767673154761312, 2.3719990546863933822, 2.3720179832780923235, 2.3720336317675667637, 2.3720439301608919891, 2.3720525203486979571, 2.372061527498721123, 2.3720682888314130743, 2.3720733548251424772, 2.3720790739000530145} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 17){
			double[] nEven = {2.4701235731338657686, 2.4381388298065229669, 2.4189764655949392846, 2.4063587314882926016, 2.397574112260480117, 2.3912214460622820411, 2.3864775629773897769, 2.3828702947953730451, 2.3800804161929329794, 2.3778979967065194678, 2.3761757644228809205, 2.3748015172443079912, 2.3737045492080373066, 2.3728247519870042659, 2.3721104622646702609, 2.3715338731339627998, 2.3710664769369609317, 2.370684076872133339, 2.3703774721316754892, 2.37012720534587773, 2.3699191759524080858, 2.3697545507416166721, 2.3696151929021427307, 2.3695043709221952355, 2.3694116617434004546, 2.3693395662310918759, 2.3692742571102236582, 2.3692245526830069124, 2.3691861862813476947, 2.3691498530492269836, 2.369122338218462076, 2.3690995983722840101, 2.3690815712138175719, 2.3690668690552141307, 2.3690522633812958198, 2.3690403638929726782, 2.3690325902268623004, 2.3690255279988030601, 2.369019250607260485, 2.3690156608039631969} ;
			double[] nOdd = {2.3356636257999805473, 2.3389627658301219704, 2.3425340595549903888, 2.3460760037483439078, 2.3494031011917808627, 2.3524157000399181783, 2.3550740586805938293, 2.3573786519911537063, 2.359344085147955461, 2.3610063728776884417, 2.3624016790409094746, 2.3635606009439449338, 2.3645248527458675447, 2.3653232375322326142, 2.3659780246273660609, 2.36651834372705272, 2.3669624461044551644, 2.3673247372420864743, 2.3676265952424531136, 2.36787355926353138, 2.3680725716190140773, 2.3682408898874052205, 2.3683740126274646087, 2.3684863967317624223, 2.3685765502515256919, 2.3686542594362895997, 2.3687117589595216849, 2.368762726831621368, 2.3688069552522819095, 2.3688383730361177726, 2.3688664452981553765, 2.3688893240492001624, 2.3689087475133394634, 2.3689248098558808309, 2.3689354590724551741, 2.3689443321165137846, 2.3689535875403127108, 2.368960559150738554, 2.3689658035204170794, 2.3689716737699710869} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 18){
			double[] nEven = {2.4678292321006227716, 2.4356636888463292223, 2.4163714017859136973, 2.4036568582454957976, 2.394798153359991133, 2.3883875548291415569, 2.3835973708785682668, 2.3799526503267314226, 2.3771321220562611209, 2.374924387964358008, 2.37318111571714363, 2.3717892666162740944, 2.3706775297746136566, 2.3697853235441583841, 2.3690605397785327035, 2.3684750945997197213, 2.3680002104666511009, 2.3676114594500266008, 2.3672995050807110751, 2.3670447091767319314, 2.3668328237779108214, 2.3666649603908407329, 2.3665228426522428862, 2.3664096989898810719, 2.3663150192761475132, 2.3662412760912934218, 2.3661745412219135076, 2.3661236556854690072, 2.3660843079603748329, 2.3660471061469947607, 2.3660188840010745182, 2.3659955408872530569, 2.3659770090829246314, 2.3659618825853745427, 2.3659469097035294993, 2.36593470263048955, 2.3659266635344584628, 2.3659193993581753013, 2.3659129437971904153, 2.3659092082964559012} ;
			double[] nOdd = {2.3322756616470416979, 2.3355859023901510696, 2.3391729040113169447, 2.342733666641691137, 2.3460813394014579103, 2.3491151271953611968, 2.3517944171428064593, 2.3541190538765790485, 2.3561032109036941229, 2.3577826562032879743, 2.3591934681284909558, 2.360366195966224101, 2.361342654822284004, 2.3621517429714398162, 2.3628158357430883996, 2.3633642212238101799, 2.3638152817094404412, 2.3641835403666737747, 2.3644905342100552836, 2.3647418861261528811, 2.3649446253315971056, 2.3651161359147865326, 2.3652519551708492962, 2.3653666375729192062, 2.3654587401283122539, 2.3655381154516703646, 2.36559699109392918, 2.3656491448432852565, 2.3656943838737083396, 2.3657266316792164851, 2.3657554286413544631, 2.3657788933781396246, 2.365798828482775118, 2.3658153210795980215, 2.3658263226011029268, 2.3658354937288637032, 2.3658450064118277112, 2.3658521844548898727, 2.365857610390550203, 2.365863636815607407} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 19){
			double[] nEven = {2.4655382274974675383, 2.4331918632441049688, 2.4137694081655398648, 2.4009577343968815377, 2.3920246062907497553, 2.3855557672922613754, 2.3807189902306475915, 2.3770365560511628189, 2.3741851408566847503, 2.3719518824587551009, 2.3701873772803283558, 2.3687777508672342996, 2.3676510949771043535, 2.3667463418354386384, 2.3660109431864806417, 2.3654165276600314094, 2.3649340578419058012, 2.364538872378137313, 2.3642214924009361532, 2.363962101469752497, 2.3637462932225496992, 2.3635751423381008429, 2.3634302163297236099, 2.3633147056488290616, 2.3632180213653359857, 2.3631426001644273427, 2.3630744118963415978, 2.3630223202290565609, 2.3629819659729736081, 2.3629438853845936563, 2.3629149317523521212, 2.3628909777392181901, 2.3628719280399805847, 2.362856365736043962, 2.3628410250850544472, 2.362828498937632915, 2.3628202087526446462, 2.3628127094151021304, 2.3628060756002433607, 2.3628021838795056908} ;
			double[] nOdd = {2.3288850457577439101, 2.3322063697139783223, 2.3358090815388066197, 2.3393886988636807267, 2.3427569998918271743, 2.345812054054487561, 2.3485123738613831179, 2.3508571728124931788, 2.3528601626118899048, 2.3545568922728530303, 2.3559833283186710773, 2.35716999196297472, 2.3581587715494460866, 2.3589786743284650861, 2.359652176284598557, 2.360208723815560905, 2.3606668288388079624, 2.3610411355699039149, 2.3613533379348741192, 2.3616091459762476035, 2.3618156619280195052, 2.3619904230373442999, 2.3621289829863929555, 2.3622460102016487049, 2.3623400884537479882, 2.3624211632525189408, 2.3624814448304811698, 2.362534805842518626, 2.3625810834182709996, 2.3626141773934739021, 2.3626436885988311154, 2.3626677817807641979, 2.3626882367909551874, 2.3627051680648132326, 2.3627165346038627725, 2.3627260015157487416, 2.3627357790277572214, 2.3627431402389964532, 2.3627487924107013484, 2.362754975570713345} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 20){
			double[] nEven = {2.46325055577114993, 2.4307233632275644375, 2.4111704985150566038, 2.3982613811607893517, 2.3892535037875584081, 2.3827261113859701247, 2.3778424545913887656, 2.3741220414818582363, 2.3712395043703913267, 2.3689805018683394167, 2.367194576104487691, 2.3657670043536409565, 2.3646252707296091522, 2.3637078308965198126, 2.3629616938903286183, 2.3623581985573385289, 2.3618680494094874689, 2.3614663376792868199, 2.3611434544465685903, 2.3608794016213687783, 2.360659615818706758, 2.3604851158544590817, 2.3603373332216821545, 2.360219415774619911, 2.3601206876962197434, 2.3600435566585939995, 2.3599738875600131394, 2.3599205648293688498, 2.3598791855384435578, 2.3598402030156204745, 2.3598105079306859189, 2.3597859225486010892, 2.3597663483577098198, 2.3597503231824488168, 2.3597346132472813984, 2.3597217570631907613, 2.3597131777080311288, 2.3597054797090146749, 2.3596986456409272392, 2.3596945956675501321} ;
			double[] nOdd = {2.3254917867010433952, 2.3288241627754526775, 2.3324425964224944074, 2.3360410926780295071, 2.3394300783160630886, 2.3425064799692774109, 2.3452279267213689273, 2.347592995861247811, 2.3496149430833508376, 2.3513290715242867179, 2.3527712685636368306, 2.3539719837497674604, 2.3549732040878210704, 2.3558040295281705845, 2.3564870473193755274, 2.3570518546444945152, 2.3575170919938428504, 2.3578975282519185619, 2.3582150161414316969, 2.358475336344239448, 2.3586856979010417668, 2.3588637584407261549, 2.3590051027690277508, 2.3591245103652238591, 2.3592206134544766449, 2.3593034186027228571, 2.3593651286078856089, 2.3594197261879643612, 2.3594670566406841239, 2.3595010200536910006, 2.359530701942487152, 2.3595559995828181421, 2.3595769849347614233, 2.3595943651920783246, 2.3596061041019766868, 2.3596158849228272558, 2.3596259302716315887, 2.3596335536641137587, 2.3596393566163298416, 2.3596457084238267043} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 21){
			double[] nEven = {2.4609662258468669727, 2.4282582042636033925, 2.4085746980446911536, 2.3955678205315389384, 2.3864848739904811481, 2.3798986146247900209, 2.3749677892949190294, 2.371209132387476437, 2.3682952365628038294, 2.3660102803710287844, 2.3642027400820277983, 2.3627570469591376856, 2.3616000854137615406, 2.360669818240471507, 2.3599128229398496082, 2.3593001356270355551, 2.3588022018074927821, 2.3583938803656598893, 2.3580654127945601672, 2.3577966215186627608, 2.3575727984412044869, 2.3573949008149579498, 2.35724421436845466, 2.3571238482418652715, 2.3570230390944226784, 2.3569441655150007442, 2.3568729852135814617, 2.3568184062193084927, 2.3567759664949181619, 2.3567360752659158862, 2.3567056237587187262, 2.356680390455652141, 2.3566602713225379695, 2.3566438009184316194, 2.3566276912601358262, 2.3566145016220461095, 2.3566056745322403465, 2.3565977117618621683, 2.3565906861484773316, 2.3565864852199722712} ;
			double[] nOdd = {2.3220958820701507186, 2.3254392875122600337, 2.3290734420416976391, 2.3326908527439504937, 2.3361005785454622696, 2.3391984026222143456, 2.3419410736150818586, 2.3443265288496037968, 2.346367547516897023, 2.3480992141224379388, 2.3495572802721067518, 2.3507721728065913425, 2.3517859500238063042, 2.3526278139382377219, 2.353320453572257609, 2.3538936155115339766, 2.3543660772246823853, 2.3547527220285662253, 2.3550755638313489726, 2.3553404721060253735, 2.3555547378549195336, 2.3557361471682818355, 2.3558803240919945488, 2.356002156147078086, 2.3561003141590952659, 2.3561848829726117494, 2.356248056270149327, 2.3563039157619338759, 2.3563523202661507128, 2.3563871665651987541, 2.3564181848696792443, 2.3564435534176517706, 2.3564650833833478139, 2.3564829239216984469, 2.356495049826115018, 2.3565051414513624728, 2.3565154700935675436, 2.3565233249645003433, 2.3565293204201278598, 2.3565358456932852249} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 22){
			double[] nEven = {2.4586852410077146835, 2.4257964051667904037, 2.4059820246684493483, 2.3928770831237575756, 2.3837187413523750479, 2.3770733090452416114, 2.3720950274448870942, 2.3682978698842767074, 2.36535237379644947, 2.3630412493215451342, 2.3612118987978680806, 2.3597479084179875386, 2.3585755660192084804, 2.3576323371902008219, 2.3568643464319176672, 2.3562423622841475179, 2.3557365462481683061, 2.3553215219147909387, 2.354987392936390922, 2.3547138065229860082, 2.3544858671206614353, 2.3543045178005179707, 2.3541508836956843709, 2.3540280205913450828, 2.3539250910959026442, 2.353844442923761715, 2.3537717225550558453, 2.3537158631122250263, 2.3536723479461469921, 2.3536315218432828367, 2.353600286327980573, 2.3535744108869036673, 2.3535537262550509929, 2.3535367921724219542, 2.3535202747268191281, 2.353506741838836458, 2.3534976360296790965, 2.3534894377731290227, 2.3534822121800846872, 2.3534778447003263935} ;
			double[] nOdd = {2.3186973348275157214, 2.3220517468123027527, 2.3257016213952694805, 2.3293379840460048946, 2.3327684989201897814, 2.3358878270113829778, 2.3386518157068034718, 2.3410577560090235494, 2.3431179751971020764, 2.3448672666530963049, 2.3463413657936031953, 2.3475705584663191239, 2.3485970149541617324, 2.3494500287469755051, 2.3501523922442748571, 2.3507340095898396903, 2.3512137872252276694, 2.3516067218606244715, 2.3519349950905139579, 2.3522045521233212462, 2.3524227772446191231, 2.3526075978406937317, 2.3527546574432856019, 2.3528789551601647645, 2.3529792056589307059, 2.3530655696498588014, 2.3531302323593736858, 2.3531873754153793676, 2.3532368795816642759, 2.3532726344970580357, 2.3533044289190780951, 2.3533304595959712024, 2.3533525488254585234, 2.3533708643186752596, 2.3533833754450350639, 2.3533937981169028575, 2.3534044097688733288, 2.3534124992263478759, 2.3534186991618732954, 2.353425376278036385} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 23){
			double[] nEven = {2.4564076021296057384, 2.4233379749187293761, 2.4033924970782361008, 2.3901891880289700687, 2.3809551386467253664, 2.374250226567280464, 2.3692242029939629688, 2.3653882796578131753, 2.3624109465628211346, 2.3600734364684847755, 2.358222087735517114, 2.3567396269387188568, 2.3555517406651476087, 2.3545954059560028071, 2.3538163028418543909, 2.3531849037456016305, 2.3526711070330854625, 2.3522492888443151671, 2.3519094202185173437, 2.3516309464807414464, 2.3513988500531306514, 2.3512139905946431995, 2.3510573533221670317, 2.3509319541376485496, 2.3508268685403010956, 2.3507444091798812558, 2.3506701187772769401, 2.3506129503185397844, 2.3505683408453790229, 2.3505265584210652818, 2.3504945280393538809, 2.3504679665446563952, 2.350446726427061872, 2.3504293097063935214, 2.3504123822705436098, 2.3503984976841878485, 2.3503891013359905493, 2.3503806599998804394, 2.3503732200888149961, 2.3503686892649668927} ;
			double[] nOdd = {2.3152961537352796384, 2.3186615400633892037, 2.3223271367012534583, 2.3259824690531258895, 2.3294338370756020318, 2.3325747455587033663, 2.3353601479655141659, 2.3377866914059417525, 2.3398662255352031814, 2.3416333284651655866, 2.3431235235476526313, 2.3443671413917006596, 2.3454063950293826402, 2.3462706746422545834, 2.3469828681051936314, 2.3475730404684100883, 2.3480602205736578192, 2.3484595318200334191, 2.3487933106536691419, 2.3490675857755083378, 2.3492898311487837582, 2.349478116301836117, 2.3496281072969309456, 2.3497549146851870461, 2.3498572944633511206, 2.3499454891244719867, 2.3500116705777314152, 2.3500701267113028869, 2.3501207580584182466, 2.35015743412363598, 2.3501900278210245965, 2.3502167202644339561, 2.3502393882211687348, 2.3502581803161741725, 2.3502711005673577738, 2.3502818604345900866, 2.3502927596270644095, 2.3503010981973182503, 2.3503075086081928191, 2.3503143821354131049} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 24){
			double[] nEven = {2.4541333125798328041, 2.4208829266363673938, 2.4008061446865069932, 2.387504169158341405, 2.3781940925950033616, 2.3714293952477700778, 2.3663553432337618432, 2.3624803943241023951, 2.3594709856949500626, 2.3571068747057437598, 2.3552333308087209929, 2.3537322229676775898, 2.3525286417617112811, 2.3515590608020691121, 2.3507687144345936758, 2.35012778371033626, 2.3496059038760703785, 2.3491772064956197852, 2.3488315138687370087, 2.3485480911543623606, 2.3483117672966442591, 2.3481233372717826846, 2.3479636516051471951, 2.3478356729317582108, 2.3477283893642537649, 2.3476440820152588707, 2.3475681932345868752, 2.3475096919478328772, 2.3474639572800759524, 2.3474212001696521668, 2.3473883596896998327, 2.3473611091378621119, 2.3473392875597753893, 2.3473213810391584389, 2.3473040306829724422, 2.347289784236141319, 2.3472800923215988433, 2.3472714238568475054, 2.3472637419452686558, 2.3472590430771282932} ;
			double[] nOdd = {2.3118923315645227845, 2.3152686581471084715, 2.3189499891429852241, 2.3226243129485837358, 2.326096593946842539, 2.3292591599907912503, 2.3320660762960701007, 2.3345133296875677509, 2.3366122991725379876, 2.3383973070745227574, 2.3399037571931113888, 2.3411619222675605911, 2.3422140921434166927, 2.3430897499086045244, 2.3438118865512049815, 2.3444107077156508545, 2.344905386957934379, 2.3453111579306891166, 2.3456505195611940806, 2.3459295825653367906, 2.3461559120719219784, 2.3463477132785715007, 2.346500683464990189, 2.3466300427964164044, 2.3467345942694688432, 2.3468246510158503604, 2.346892382198072724, 2.3469521741129657499, 2.347003946757725501, 2.3470415734184206791, 2.347074978449618321, 2.3471023686103991146, 2.3471256139587102219, 2.3471449046683634521, 2.3471582372192387744, 2.3471693404980209507, 2.3471805349814562902, 2.3471891336040369147, 2.3471957433133332493, 2.3472028076792472717} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 25){
			double[] nEven = {2.4518623751083121753, 2.4184312772058826901, 2.398222982401853276, 2.38482204725697855, 2.3754356324449621418, 2.3686108474427260973, 2.3634884820077477485, 2.3595742423831462808, 2.3565325235642009538, 2.3541416000658510477, 2.3522456630631687347, 2.3507257348071397551, 2.3495062953006420337, 2.3485233260486872986, 2.3477216098156361568, 2.3470710366110516532, 2.3465409698628301172, 2.3461052987612429632, 2.3457537008500213283, 2.345465259373862299, 2.3452246368191955739, 2.3450325840818173617, 2.344869792737289238, 2.3447391899895846379, 2.3446296701112832039, 2.3445434867500005716, 2.3444659690145353004, 2.3444061087096250695, 2.3443592244030160288, 2.3443154735137379241, 2.3442817999432064013, 2.3442538432940600579, 2.344231429116345744, 2.3442130188812706493, 2.3441952380141310996, 2.3441806204248796242, 2.3441706226888103792, 2.3441616589972245066, 2.3441537931292830699, 2.3441489149600420738} ;
			double[] nOdd = {2.308485879322494938, 2.3118731401486409816, 2.3155701818544138781, 2.3192635331935602672, 2.3227567722175361808, 2.3259410710775383357, 2.328769593327523868, 2.3312376681532258615, 2.3333561930030515263, 2.3351592322177019412, 2.3366820629711773094, 2.337954902443958094, 2.3390201094164462248, 2.3399072629137172008, 2.3406394468866111858, 2.3412470253193711223, 2.3417492906654007179, 2.3421616057516989606, 2.3425066270512076017, 2.3427905456677682317, 2.343021022675138898, 2.3432163927441322926, 2.3433723946439970476, 2.3435043512042335045, 2.3436111104055217247, 2.3437030656929520589, 2.3437723778650334516, 2.3438335346459111541, 2.3438864758769666352, 2.3439250642837428096, 2.343959303771947944, 2.3439873987338155636, 2.3440112459113850996, 2.3440310406609072835, 2.3440447955026817439, 2.3440562539806757414, 2.3440677619630707618, 2.3440765985697487039, 2.3440834365511795667, 2.3440906569582331542} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 26){
			double[] nEven = {2.4495947978413181723, 2.4159830370997847915, 2.3956430276443914096, 2.3821428498125474249, 2.3726797874184488713, 2.3657946116832628825, 2.3606236501937454264, 2.3566698635432605791, 2.3535955931951688669, 2.3511776347451158742, 2.3492591131833484575, 2.3477201885649248148, 2.3464847329463278669, 2.345488230458791179, 2.3446750173029768938, 2.3440146900901219773, 2.3434763308334058962, 2.3430335914716704515, 2.3426760080405708564, 2.3423824686695771113, 2.3421374883803851574, 2.3419417529822568191, 2.3417758087246469678, 2.3416425341231414947, 2.341530740289921475, 2.3414426404829913331, 2.3413634563801477562, 2.3413022066960391676, 2.3412541589709805478, 2.3412093893162779779, 2.3411748631407784949, 2.3411461907154649253, 2.3411231711554880697, 2.3411042357557683147, 2.3410860188536819493, 2.3410710213669050361, 2.3410607076109739566, 2.3410514777600499592, 2.3410433905969996182, 2.3410383256727458345} ;
			double[] nOdd = {2.3050768007052364617, 2.3084749497806980045, 2.3121877130405263934, 2.3159001235644427474, 2.3194143685797130594, 2.3226204777436882942, 2.325470705748166278, 2.3279597116949903857, 2.330097910794904692, 2.3319191021521659124, 2.3334584428123199551, 2.3347460810121911656, 2.3358244462050867796, 2.336723209618829511, 2.3374655507393580223, 2.338081985762754833, 2.3385919342906400509, 2.3390108768796453731, 2.3393616358285047596, 2.3396504821382611006, 2.3398851660200916669, 2.3400841690497182768, 2.3402432512164907941, 2.3403778466366893518, 2.3404868540480432415, 2.3405807438006025478, 2.3406516618059263202, 2.3407142118433750255, 2.3407683465256763355, 2.3408079260945471312, 2.3408430118330256775, 2.3408718271118758025, 2.340896290317390438, 2.3409166103288563399, 2.3409307867457065377, 2.3409426157033266236, 2.340954439675966281, 2.3409635356711997467, 2.3409705951543369196, 2.3409780597495859489} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 27){
			double[] nEven = {2.4473305795248276873, 2.4135382201602153529, 2.393066305928018167, 2.3794666031561710895, 2.3699265854283950716, 2.3629807209498290277, 2.3577608812429762253, 2.3537672856300471125, 2.3506602247689323271, 2.348215019588995478, 2.3462737159572744083, 2.3447156176865657784, 2.3434639864955113531, 2.3424538079651942013, 2.3416289669695227182, 2.340958763625461625, 2.3404120108863089023, 2.3399621140936255337, 2.3395984576465478355, 2.3392997534351502864, 2.3390503405343681109, 2.3388508667601612956, 2.3386817159555182144, 2.3385457190510394732, 2.3384316100812676531, 2.3383415613724101156, 2.3382606876696856446, 2.3381980184367994191, 2.3381487760597683412, 2.3381029664366081988, 2.3380675794260459277, 2.3380381625010508984, 2.3380145160294980577, 2.3379950637090520793, 2.3379763830190212204, 2.3379610021479044768, 2.3379503717346712399, 2.3379408679405093707, 2.3379325477589807392, 2.3379272887335087461} ;
			double[] nOdd = {2.3016651026253223122, 2.3050741090543458434, 2.3088025872733592969, 2.3125340747799127961, 2.3160693881297125252, 2.3192973848161662076, 2.3221694055115889022, 2.3246794551235590021, 2.3268374478986109111, 2.3286769228030217427, 2.3302328981423889864, 2.3315354602585531829, 2.3326271095602000294, 2.3335375967598341873, 2.3342902068063593468, 2.3349155972865807129, 2.3354333229927188853, 2.3358589813901975418, 2.3362155543811007341, 2.3365094010433837823, 2.3367483569941258637, 2.3369510456343789429, 2.3371132589243246436, 2.337250542143402221, 2.3373618350368263741, 2.337457694567588895, 2.3375302586116273318, 2.3375942258003132856, 2.3376495774148717821, 2.3376901654871287128, 2.33772612347329245, 2.337755675611999262, 2.3377807614126684399, 2.3378016077967487263, 2.3378162421157018258, 2.3378284364425669928, 2.3378405862897086998, 2.3378499502865022208, 2.3378572501638585912, 2.3378649000486819709} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 28){
			double[] nEven = {2.4450697271662735766, 2.4110968382993136494, 2.390492841527293244, 2.3767933305564068469, 2.3671760606265146443, 2.3601692081275329471, 2.3549002087184485177, 2.3508665393940910704, 2.3477264515297426861, 2.3452537848954322364, 2.3432895011160739251, 2.3417120494232577244, 2.3404440836641455803, 2.3394200867875176719, 2.3385834861455534472, 2.3379032920107962745, 2.3373480390326029088, 2.3368908861231587615, 2.3365210763206460953, 2.3362171222743635113, 2.3359632205735172406, 2.3357599439733274238, 2.3355875393077614177, 2.3354487783841944015, 2.3353323092108122516, 2.3352402747677740713, 2.3351576737429251551, 2.3350935573459610239, 2.3350431024014470793, 2.3349962308899936403, 2.3349599522817681141, 2.3349297853697850158, 2.3349055002871952347, 2.3348855063140039334, 2.334866366052150255, 2.3348505608917387022, 2.3348396207161097315, 2.3348298353551539819, 2.3348212833125656651, 2.3348158123371041128} ;
			double[] nOdd = {2.2982507804594969336, 2.3016706159372453122, 2.3054148111995962367, 2.3091653998216621346, 2.3127218313675115269, 2.3159717866022506705, 2.3188657019097886902, 2.3213969010119535064, 2.3235748092409664878, 2.3254326890468539624, 2.3270054276385923053, 2.3283230445887626026, 2.3294280962369122712, 2.3303504272244759399, 2.3311134147406540329, 2.3317478653626078078, 2.3322734630850043835, 2.332705922441811186, 2.333068390036563855, 2.3333673079788215254, 2.3336105978935814953, 2.3338170347257864989, 2.3339824280071055362, 2.3341224440612240443, 2.334236070000775598, 2.3343339334855084388, 2.3344081724000176337, 2.334473587708875808, 2.3345301777649405395, 2.3345717998561306139, 2.3346086415316249507, 2.3346389517917098821, 2.3346646731452951329, 2.3346860703347158683, 2.3347011543325439931, 2.3347137315617816355, 2.3347262098822665344, 2.3347358700009506194, 2.3347433655613172299, 2.3347512235997593955} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 29){
			double[] nEven = {2.4428122371916716205, 2.4086589086811720506, 2.3879226491650547004, 2.3741230633007583961, 2.3644282390835225094, 2.3573601037339839692, 2.3520416648309612206, 2.3479676646634781711, 2.3447943103044921465, 2.3422939645268736619, 2.3403065039540211778, 2.3387095220359745973, 2.3374250568532271011, 2.3363870941961839556, 2.3355386064130341239, 2.33484830198370652, 2.3342844443669479304, 2.3338199421712548798, 2.3334438911118984272, 2.3331346203809841811, 2.3328761623779663559, 2.3326690223862569518, 2.3324933023657572484, 2.3323517287806621034, 2.3322328575271398243, 2.3321388033619969704, 2.3320544415644079983, 2.3319888530182746322, 2.3319371530350023747, 2.3318892014186860528, 2.3318520162839937448, 2.331821076091164624, 2.3317961382699978756, 2.3317755891346494401, 2.3317559692747265032, 2.3317397820546625908, 2.3317284829282978187, 2.3317184179410528344, 2.3317096103268144525, 2.3317038018841120817} ;
			double[] nOdd = {2.2948338490723116934, 2.2982644819338302611, 2.3020243851263590962, 2.3057941038230715947, 2.3093716974291940147, 2.3126436881247474098, 2.3155595899509049396, 2.3181120523345324358, 2.3203099935589817093, 2.3221864071914106731, 2.3237760365988111566, 2.3251088282492466952, 2.3262274110822556139, 2.3271617053062363389, 2.3279351769938254613, 2.3285787940370243909, 2.32911235746169476, 2.3295517068873183852, 2.3299201470100352473, 2.330224205961673789, 2.3304719019644299927, 2.3306821429337101215, 2.3308507656235386563, 2.3309935650771818061, 2.3311095607289598064, 2.331209467352401532, 2.3312854123308768273, 2.3313523012686472313, 2.3314101637351503093, 2.331452834524895934, 2.3314905841934652209, 2.3315216651803676307, 2.3315480487855668734, 2.3315699984664624012, 2.3315855534079470424, 2.3315985216940724456, 2.3316113435152931999, 2.3316212820182271592, 2.3316290367490193347, 2.3316371511906934799} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 30){
			double[] nEven = {2.4405581173876660372, 2.406224442341316383, 2.3853557563068825687, 2.3714558232486449008, 2.3616831478479602957, 2.3545534384349458001, 2.3491852791496481423, 2.3450706910853713616, 2.3418638348332176946, 2.3393355883903494963, 2.3373247557846243971, 2.335708064380023874, 2.3344069402827853921, 2.3333548675949020712, 2.3324943577157286612, 2.3317938233976334139, 2.3312212520563400098, 2.3307493055965511353, 2.3303669280910050965, 2.330052265191903782, 2.3297891666842667213, 2.3295781121381429202, 2.3293990252064831203, 2.3292545961465278559, 2.3291332819561541001, 2.3290371608946189852, 2.3289510091603422559, 2.3288839173121798076, 2.3288309493374739212, 2.3287818939631157455, 2.3287437802175228185, 2.3287120534155789642, 2.3286864487766143483, 2.3286653316879863951, 2.328645225561711829, 2.3286286183574662623, 2.3286169748980922733, 2.3286066077216296399, 2.3285975563513123809, 2.3285916968094091395} ;
			double[] nOdd = {2.2914143097861723319, 2.2948557013908246205, 2.2986313072069064489, 2.3024201806442814444, 2.3060189909318391521, 2.3093130890691146995, 2.312251073601260476, 2.3148249077969098586, 2.3170430019111183384, 2.3189380723550212515, 2.3205447220080439585, 2.3218928204532098825, 2.3230250540808841109, 2.3239714281929968465, 2.3247555032982103462, 2.3254083864414054617, 2.3259500137698427835, 2.3263963419459843252, 2.3267708387814463045, 2.3270801109707486276, 2.3273322783230359079, 2.3275463763050283639, 2.3277182883148075376, 2.3278639157783200808, 2.3279823245974733403, 2.3280843106759760985, 2.3281619934667627803, 2.3282303865696856171, 2.3282895435207549006, 2.3283332901825324335, 2.3283719578173327491, 2.3284038390778638572, 2.3284308911593414315, 2.3284534139391963592, 2.3284694442850613072, 2.3284828120295850695, 2.3284959854007833968, 2.328506214078590375, 2.328514239320173651, 2.3285225140069125693} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 31){
			double[] nEven = {2.4383073710080678254, 2.4037934575204298326, 2.3827921721392519849, 2.368791638976337488, 2.3589408215804787972, 2.3517492439342131405, 2.3463310884911341425, 2.3421756525432351204, 2.3389350569528151169, 2.3363786923143381458, 2.3343442910355691744, 2.3327077141192922305, 2.3313897645865901964, 2.3303234325882202782, 2.3294507664520702761, 2.3287398847398348423, 2.3281584965916710672, 2.3276790077581472893, 2.3272902236554329214, 2.3269700789178111577, 2.3267022895456355158, 2.3264872464327295276, 2.3263047392502107513, 2.3261573979944545343, 2.3260336015383882291, 2.3259353796214932153, 2.325847403025067095, 2.3257787809733345696, 2.3257245177578385054, 2.3256743304894995639, 2.3256352702000420152, 2.3256027379631754037, 2.3255764491881540934, 2.3255547547908648198, 2.3255341482417497545, 2.3255171746179543746, 2.3255051144935059426, 2.3254944500942089647, 2.3254851446490043543, 2.3254790617673855024} ;
			double[] nOdd = {2.2879921700330507761, 2.2914442903320639822, 2.2952355933072134953, 2.2990436378087095726, 2.3026637150267257326, 2.3059799939529876944, 2.3089401586996549653, 2.3115354647905119734, 2.3137738350170655721, 2.3156876924889053804, 2.3173114901251095077, 2.3186750222908463215, 2.3198210320363128467, 2.3207796043841923961, 2.3215743913915649621, 2.322236649634471739, 2.3227864368608872603, 2.3232398331750108156, 2.3236204684496915007, 2.3239350310892765705, 2.3241917328428778333, 2.3244097496308446793, 2.3245850072286375898, 2.3247335062414418161, 2.3248543674612478505, 2.3249584759021728608, 2.325037932190654022, 2.3251078659173183283, 2.325168335061931657, 2.3252131788838510396, 2.3252528074708376238, 2.3252854780617218111, 2.3253132263646354438, 2.3253363222326117743, 2.3253528484664411913, 2.3253666306236628891, 2.3253801646321008434, 2.3253906896897804657, 2.3253989684629567947, 2.3254074910392850128} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 32){
			double[] nEven = {2.4360599978883064054, 2.4013659487988281427, 2.3802319320249578638, 2.3661305352278101388, 2.3562012900103979085, 2.3489475567233650821, 2.3434791281061082557, 2.3392825867858131339, 2.3360080113648296063, 2.3334233152969958702, 2.3313651436853071175, 2.3297084920941473207, 2.3283735618504146636, 2.3272928225718625406, 2.3264078705318746998, 2.3256865205181442846, 2.3250962028518937785, 2.3246090739951239534, 2.3242137909691802378, 2.3238880949557025879, 2.3236155358956169792, 2.3233964490778946654, 2.3232104637936732416, 2.3230601654508991061, 2.3229338374262931133, 2.3228334810889421647, 2.322743644029563459, 2.3226734591509785588, 2.3226178645775705789, 2.3225665338747156774, 2.3225265088845272743, 2.322493150254794525, 2.3224661660635028682, 2.3224438728898784134, 2.3224227611521421899, 2.3224052791749572044, 2.3223929004836767476, 2.3223819248668831072, 2.3223723601600236854, 2.3223660714503813196} ;
			double[] nOdd = {2.2845674364472920992, 2.2880302465381330279, 2.2918372381712650565, 2.2956644764676843451, 2.2993058704896007782, 2.3026444055986718951, 2.3056268320707693498, 2.3082437293545687851, 2.3105024956292519178, 2.312435263913395822, 2.3140763385103082506, 2.315455432927856716, 2.3166153436081842187, 2.3175862342212658618, 2.318391847962553598, 2.3190635877928098552, 2.3196216353337111293, 2.320082186451724926, 2.3204690417323856622, 2.3207889687182823302, 2.3210502701903541478, 2.3212722782495434082, 2.3214509265847236286, 2.3216023532054244072, 2.3217257182536608084, 2.3218319727220455562, 2.3219132353998026552, 2.3219847298002544989, 2.3220465474350469037, 2.3220925148324575993, 2.3221331106380866949, 2.322166606175943393, 2.3221950520867906675, 2.3222187540569843023, 2.3222357046996364716, 2.3222499793056741169, 2.3222638782443838501, 2.3222746754524079549, 2.3222832620623834465, 2.3222920364968659968} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 33){
			double[] nEven = {2.4338160053482424949, 2.3989419505638789332, 2.3776750462317246537, 2.3634725423810567513, 2.3534645784939867141, 2.3461484062971469378, 2.3406294272103567167, 2.3363915211159671514, 2.3330827347157572227, 2.3304694862382335785, 2.3283873485372836853, 2.3267104488499845694, 2.3253583674073872167, 2.3242630730340767542, 2.3233656994958882258, 2.322633756846455455, 2.3220344027401478293, 2.3215395364077759943, 2.3211376644153762783, 2.3208063424220308768, 2.3205289425849113805, 2.3203057447223685017, 2.3201162263723733581, 2.3199629213058505783, 2.3198340195997633195, 2.3197314837603308924, 2.3196397548057805515, 2.3195679762180820838, 2.3195110411079356005, 2.3194585169767392152, 2.3194175131907330822, 2.3193833101363954263, 2.3193556100695360556, 2.3193327128420659911, 2.3193110702323762595, 2.3192931473262761166, 2.3192804046051831435, 2.3192691005579226804, 2.319259255927670349, 2.3192527519556294102} ;
			double[] nOdd = {2.2811401159671906846, 2.284613579795414573, 2.2884362513099305581, 2.2922827052747178911, 2.2959454613680954083, 2.2993063238337252407, 2.3023111095653194802, 2.3049497079756102735, 2.3072289843955235966, 2.3091807922730898106, 2.3108392727764957009, 2.3122340563401948543, 2.3134079975262222817, 2.3143913242202138747, 2.315207883769503816, 2.3158892048964805355, 2.3164556122411283923, 2.3169234140866650229, 2.3173165730779579086, 2.317641939403789042, 2.3179079099063484293, 2.318133958933482397, 2.3183160606991144448, 2.3184704561466862316, 2.3185963598496726057, 2.3187048166987045406, 2.3187879182510418019, 2.3188610107751101985, 2.318924201303700805, 2.3189713117024024491, 2.319012907778346122, 2.319047230441805052, 2.3190764011019449065, 2.3191007154498652909, 2.3191182571177373362, 2.3191328870696072961, 2.3191471711055315907, 2.3191583199068070975, 2.319167139915001119, 2.3191761221003082127} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 34){
			double[] nEven = {2.4315753912172146656, 2.3965214750841941083, 2.3751215407025774162, 2.360817679627312593, 2.350730723187489879, 2.3433518231205248128, 2.3377820226956438354, 2.3335025017828869842, 2.3301592576720056016, 2.3275172433706434738, 2.325410941593271108, 2.3237136091050567543, 2.3223442129386215882, 2.3212342152530545114, 2.3203242868520219666, 2.3195816321071971444, 2.3189731264646891162, 2.3184704249468812698, 2.3180618764390437114, 2.3177248427569967504, 2.3174425287873390289, 2.3172151588793576948, 2.3170220522264486362, 2.3168656918148355928, 2.3167341685379785332, 2.3166294168179373258, 2.3165357571946536552, 2.3164623556774586177, 2.3164040470218414391, 2.3163503322913641114, 2.3163083045050094633, 2.3162732449840723881, 2.3162448140603815183, 2.3162212869771483525, 2.3161991164741273508, 2.3161807258604172333, 2.316167590296820844, 2.3161559689734270151, 2.3161458480355983092, 2.3161391055195319488} ;
			double[] nOdd = {2.2777102172616796594, 2.281194291384006867, 2.2850326350883065629, 2.2888983253849115584, 2.2925824884616505805, 2.2959657495865704036, 2.2989929914150581958, 2.301653393324371244, 2.3039533040681461351, 2.3059242767019907383, 2.3076002958574548529, 2.3090109037398240943, 2.3101989943014165085, 2.3111948834609403747, 2.3120224939947422449, 2.3127135093487574125, 2.3132883740591441146, 2.3137635175816368971, 2.3141630610654644329, 2.31449394426557431, 2.3147646515217603636, 2.3149947994648862881, 2.3151804180136141831, 2.3153378351280076153, 2.3154663270238491357, 2.3155770191447229145, 2.3156619970909408934, 2.3157367135562645366, 2.3158013058789155281, 2.3158495858322445393, 2.3158921777722620838, 2.3159273784271272589, 2.3159572814392368478, 2.3159822146788746622, 2.3160002841280866726, 2.3160153578260915808, 2.3160300297840423767, 2.3160415161938017192, 2.3160506085516390229, 2.3160598382426806907} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 35){
			double[] nEven = {2.429338161063773871, 2.3941045159653446817, 2.3725714345383193127, 2.358165975820253113, 2.347999750175206124, 2.3405578418983692401, 2.3349369523506511293, 2.330615552115491429, 2.3272376224245920895, 2.3245666203129946581, 2.3224359502735110183, 2.3207180081015073014, 2.3193311311596369606, 2.3182062794817253071, 2.3172836560255007932, 2.3165301680768966008, 2.315912405667191365, 2.3154017654588274766, 2.3149864516745775056, 2.3146436197854720618, 2.3143563300990339648, 2.3141247262888429148, 2.3139279701821431345, 2.3137684984604067751, 2.3136343120384603722, 2.3135273045901749711, 2.313431682485862062, 2.3133566159368901261, 2.313296908357357573, 2.313241961049938844, 2.3131989104619106179, 2.3131629721156863333, 2.3131337895646377767, 2.3131096374678192795, 2.3130869024720843719, 2.3130680441054249918, 2.31305449621734871, 2.313042555436413128, 2.3130321518878140807, 2.3130251742762952816} ;
			double[] nOdd = {2.274277747277755779, 2.2777723979064505855, 2.2816264052593444589, 2.2855113428448246005, 2.2892169602451146737, 2.2926226899214303678, 2.2956724771975505206, 2.2983547946964830722, 2.3006754585485995612, 2.3026657236378946791, 2.3043594084481942019, 2.3057859627902996813, 2.30698833581728735, 2.3079969083672997598, 2.3088356860415291116, 2.3095365058011405601, 2.3101199317239040631, 2.3106025076734431067, 2.3110085202390200365, 2.3113449931999903164, 2.3116205152505986398, 2.3118548431862877557, 2.3120440127577643885, 2.312204502629704006, 2.3123356273574682263, 2.3124485911030991936, 2.3125354826692512411, 2.3126118579271750519, 2.3126778762247410803, 2.3127273504873029353, 2.3127709706755350538, 2.3128070549119521537, 2.3128377106662010299, 2.3128632331481973061, 2.3128818990322055349, 2.3128974341993902009, 2.3129124960660232269, 2.3129242353008110378, 2.3129336933221198436, 2.3129431763939911626} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 36){
			double[] nEven = {2.4271043194001715726, 2.39169110166399701, 2.3700247480494645025, 2.3555174653643184968, 2.3452716914537932169, 2.337766497745692007, 2.3320942436393212738, 2.3277307149974872935, 2.3243178582558856604, 2.3216176542518569548, 2.319462421686662168, 2.3177236817427502302, 2.3163191621134133769, 2.3151792855793442705, 2.314243849542353626, 2.313479403633803777, 2.31285227081652911, 2.3123335961423618912, 2.31191142218657264, 2.3115627262592743918, 2.3112703734733681671, 2.3110344642142739424, 2.3108340060072904976, 2.3106713717639548733, 2.3105344771083298205, 2.3104251684545746848, 2.3103275414044031066, 2.3102507972642820633, 2.3101896551405967095, 2.310133464289229277, 2.3100893537125664068, 2.3100525126336588499, 2.3100225645789960183, 2.3099977528251325332, 2.3099744666663792891, 2.309955117684030057, 2.3099412047886898058, 2.3099288833240239072, 2.3099181837604541023, 2.3099109644139819153} ;
			double[] nOdd = {2.2708427107361970343, 2.2743478996259760549, 2.278217550076344633, 2.2821217629262533499, 2.2858488791215036962, 2.2892771511788718719, 2.292349571256148355, 2.2950539129086049428, 2.2973954517718762069, 2.2994051335982397255, 2.3011166131988307626, 2.3025592500420870579, 2.3037760303061487477, 2.3047974088421350203, 2.3056474727068376751, 2.3063582014694987699, 2.3069502860744184325, 2.3074403878428770831, 2.3078529590890943801, 2.308195105082407661, 2.3084755071911757796, 2.3087140662728806717, 2.308906854951799037, 2.3090704683623264337, 2.3092042711656062259, 2.3093195534140669167, 2.3094083909966349744, 2.3094864562972801103, 2.3095539309175379117, 2.3096046235950384862, 2.3096493004441494001, 2.3096862783630336402, 2.3097177057555651203, 2.309743940643624871, 2.3097631002271796774, 2.3097790968703972858, 2.3097945730475748505, 2.3098067285984793529, 2.3098164060319046342, 2.3098261389116077069} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 37){
			double[] nEven = {2.4248738622602679094, 2.389281241790199406, 2.3674815061324250287, 2.3528721631235995915, 2.3425465793197775, 2.3349778242337371204, 2.3292539367937146189, 2.3248480229034873545, 2.321400007767775886, 2.3186703820084866301, 2.316490384254446866, 2.3147306672177134779, 2.3133083345145193377, 2.3121533232477871067, 2.3112049002456669378, 2.3104293681671226324, 2.3097927555963506663, 2.3092659413964522486, 2.3088368192519732602, 2.3084821672558586414, 2.3081846839919406555, 2.3079444093369976265, 2.3077401855090444727, 2.3075743377388326927, 2.3074346870754682826, 2.3073230365786594476, 2.3072233706795914898, 2.3071449048963237338, 2.3070822989844823603, 2.3070248363601923991, 2.3069796504762809519, 2.3069418877027434434, 2.3069111641992878781, 2.3068856789649831995, 2.3068618154961049171, 2.306841979733896153, 2.3068276476109006445, 2.3068149727188678177, 2.3068039780714961751, 2.3067965029586012804} ;
			double[] nOdd = {2.267405128588082075, 2.2709208024638485313, 2.2748060892552550705, 2.2787295883099538685, 2.2824782486596753017, 2.2859291304848419202, 2.2890242755338716663, 2.2917507487034174396, 2.2941132805199142553, 2.2961425095510112904, 2.2978719183457845254, 2.2993307658283872463, 2.3005620802052799689, 2.3015963852808738466, 2.3024578555036372407, 2.3031786027434928421, 2.3037794502811212993, 2.3042771706438505142, 2.3046963854709203723, 2.3050442808757085622, 2.3053296343505378374, 2.3055724914441824147, 2.3057689577611126808, 2.3059357470511367971, 2.30607225359169421, 2.3061899136311194702, 2.306280734805002286, 2.306360522109768052, 2.3064294819870743147, 2.3064814140644220863, 2.306527170612636457, 2.3065650694896921991, 2.3065972848511528959, 2.3066242100735996345, 2.3066439180987448054, 2.3066604036214486406, 2.3066762775486759907, 2.3066887970973222188, 2.3066987671317065178, 2.3067087686689826675} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 38){
			double[] nEven = {2.4226467958108726108, 2.3868749515581479947, 2.3649417226354345622, 2.3502301041537099202, 2.3398244391886349192, 2.3321918526215585921, 2.3264160621107006222, 2.3219675146865461635, 2.3184841017353798875, 2.3157248386873927615, 2.3135198776579968261, 2.31173899859832499, 2.3102986892079235837, 2.3091283673489577666, 2.3081668394386731791, 2.307380097903164895, 2.3067338889886377373, 2.30619883512872903, 2.3057626710014309523, 2.3054019799449876338, 2.3050992940589138946, 2.3048545826816124737, 2.3046465378261276058, 2.3044774230375368873, 2.3043349679463869251, 2.3042209357417839932, 2.3041191935187397277, 2.3040389737576494333, 2.3039748760049914011, 2.3039161187684937815, 2.3038698288689012372, 2.3038311301775182827, 2.3037996027610621042, 2.3037734515017813663, 2.3037489869752265648, 2.3037286370981742145, 2.3037138839358113351, 2.3037008345304297308, 2.3036895327583013504, 2.3036817899832162659} ;
			double[] nOdd = {2.2639649962493035851, 2.2674911221463247557, 2.2713920274438024194, 2.2753348253159249026, 2.2791050787345201734, 2.282578634681921681, 2.2856966017035307281, 2.2884453100032504658, 2.2908289538433059818, 2.2928778558901958817, 2.2946253236931992703, 2.2961005107162462124, 2.2973464884865562041, 2.2983938467117392968, 2.2992668372380151709, 2.2999977162342508663, 2.3006074283498674227, 2.30111286879720911, 2.3015388083594947588, 2.3018925347260648095, 2.302182909859951998, 2.3024301318062132538, 2.3026303309679070352, 2.3028003506031224923, 2.3029396505433412656, 2.3030596857434875169, 2.3031525268980899135, 2.3032340698435307402, 2.3033045454949752084, 2.3033577505833191523, 2.3034046028036914144, 2.3034434417112019666, 2.3034764601002053475, 2.3035040516413411993, 2.3035243912660554599, 2.3035413286284858181, 2.3035576496929475177, 2.3035705203134071439, 2.303580800941793072, 2.3035910703219140139} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 39){
			double[] nEven = {2.4204231203231523217, 2.3844722281805745823, 2.3624054243264378528, 2.3475913119850613242, 2.3371053070963094811, 2.3294086143447332304, 2.3235806589197229854, 2.319089226827420358, 2.3155701813202069772, 2.312781060332242955, 2.3105509341822192404, 2.308748714656227996, 2.3072902579053105043, 2.3061044748946395444, 2.305129702540615888, 2.3043316272189366956, 2.3036757049828326949, 2.303132307384855082, 2.3026890117053886442, 2.3023222024152292242, 2.3020142325316732546, 2.3017650240186755539, 2.301553090212864916, 2.3013806558721796591, 2.3012353444886626264, 2.3011188903340280554, 2.301015032966485574, 2.3009330255605529025, 2.3008674049971058473, 2.3008073199473968451, 2.300759901202841462, 2.3007202540463933538, 2.3006879059913130092, 2.3006610289078786025, 2.3006359879135156454, 2.3006151331528870152, 2.3005999295711556663, 2.3005864950423386972, 2.3005748918932162894, 2.3005668936989116524} ;
			double[] nOdd = {2.2605223302659385176, 2.2640588620719430679, 2.2679753698790676708, 2.2719374827645215653, 2.2757293677272585342, 2.279225671429966571, 2.2823665457034203463, 2.2851375806478673169, 2.2875424764190310789, 2.289611177871742953, 2.2913768316708167383, 2.2928684940510848378, 2.2941292647200590693, 2.2951897963231369104, 2.2960744283689398237, 2.2968155474052487364, 2.2974342280264230531, 2.2979474771595893579, 2.2983802385798526302, 2.2987398683356676798, 2.2990353447929829933, 2.2992869939550710789, 2.2994909909699048356, 2.2996642928210038193, 2.2998064087953573598, 2.2999288847476684339, 2.3000237846144395704, 2.3001071185813879438, 2.3001791387738257377, 2.3002336383912673767, 2.3002816188715380363, 2.3003214150828914519, 2.3003552524382420152, 2.3003835507194225762, 2.3004044539531962599, 2.3004219272719472755, 2.3004386556482172566, 2.3004519242566145998, 2.3004625224858261667, 2.3004730748860624523} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 40){
			double[] nEven = {2.4182028470015186628, 2.3820731085180786302, 2.3598726265234812871, 2.3449558148243805356, 2.334389212048218365, 2.3266281472726193513, 2.3207477629784416528, 2.3162131889393031692, 2.3126582853519912497, 2.3098390875041561188, 2.3075835973500082865, 2.3057598471492752878, 2.3042830768126951746, 2.3030816815234573802, 2.3020935256569687866, 2.3012839882224298549, 2.300618241612351067, 2.3000663939282697257, 2.299615866018814625, 2.2992428568299945191, 2.2989295322502845131, 2.2986757532103814228, 2.2984598745910904682, 2.2982840648390574501, 2.2981358487837351134, 2.2980169287801928135, 2.2979109196219460465, 2.2978270892184773366, 2.2977599213745074636, 2.2976984783963962933, 2.2976499252879643009, 2.2976092842955870843, 2.297576103665944558, 2.297548519398778577, 2.2975222162580908325, 2.2975014532332278527, 2.2974858173106320613, 2.2974720334768008456, 2.2974600708171308838, 2.2974518033795261474} ;
			double[] nOdd = {2.2570771335297186155, 2.2606240270710791229, 2.2645561255967088243, 2.2685375713125517372, 2.272351126465749882, 2.2758702432223696377, 2.2790341129252835728, 2.2818276201628324706, 2.284253843963815811, 2.2863424759210819737, 2.28812645419859928, 2.2896347175267122154, 2.2909104098466595012, 2.2919842426139460656, 2.2928806308886837684, 2.2936321098688670084, 2.294259860186388611, 2.2947810169254911905, 2.2952206879840950648, 2.2955863048614846278, 2.2958869471913989635, 2.2961430937166693589, 2.2963509477781425261, 2.2965275829446323286, 2.2966725667230676322, 2.2967975281299808366, 2.2968945263346349783, 2.2969796796143677753, 2.2970532762756983303, 2.2971089927647048157, 2.2971582254066840179, 2.297199000976346106, 2.2972336821174597077, 2.2972626977669747816, 2.2972842117347704871, 2.2973021979828507355, 2.2973193975876906592, 2.2973330270033023304, 2.2973439490245857186, 2.2973548024437970838} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		return neff ;

	}


	// for test *******
	public static void main(String[] args){
		double[] g = MathUtils.linspace(100, 1000, 1000) ;
		Neff450X220CoupledStrip db = new Neff450X220CoupledStrip();
		double[] nEven = db.getNeffEven(1550, g) ;
		double[] nOdd = db.getNeffOdd(1550, g) ;
		
		MatlabChart fig = new MatlabChart() ;
		fig.plot(g, nEven, "b", 2f, "Even");
		fig.plot(g,  nOdd, "r", 2f, "Odd");
		fig.renderPlot();
		fig.xlabel("Gap (nm)");
		fig.ylabel("Effective Index");
		fig.legendON();
		fig.run(true);
		
		double[] lambdaNm = MathUtils.linspace(1500, 1600, 1000) ;
		double[] nEven1 = db.getNeffEven(lambdaNm, 100) ;
		double[] nOdd1 = db.getNeffOdd(lambdaNm, 100) ;
		
		MatlabChart fig1 = new MatlabChart() ;
		fig1.plot(lambdaNm, nEven1, "b", 2f, "Even");
		fig1.plot(lambdaNm,  nOdd1, "r", 2f, "Odd");
		fig1.renderPlot();
		fig1.xlabel("Wavelength (nm)");
		fig1.ylabel("Effective Index");
		fig1.legendON();
		fig1.run(true);
		
		MatlabChart fig2 = new MatlabChart() ;
		fig2.plot(g,  ArrayFunc.apply(s -> (db.getNeffEven(1550, s)+db.getNeffOdd(1550, s))/2.0, g));
		fig2.renderPlot();
		fig2.xlabel("gap (nm)");
		fig2.ylabel("Effective Index");
		fig2.run(true);
	}


}
