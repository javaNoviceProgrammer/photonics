package photonics.wg.coupling;

import flanagan.interpolation.CubicSpline;
import mathLib.plot.MatlabChart;
import mathLib.util.MathUtils;

public class NeffCoupledStripWg_400X220_COMSOL {

	final static double LAMBDA_MIN = 1500 ;
	final static double LAMBDA_MAX = 1600 ;


	public double getNeffEven(double lambdaNm, double gapNm){
		double neffEven = Double.NaN ;
		double[] lambda_nm = MathUtils.linspace(LAMBDA_MIN, LAMBDA_MAX, 2.5) ;
		// step 1: find lambda_min and lambda_max interval
		int M = lambda_nm.length ;
		double lambdaMinInterval = Double.NaN ;
		double lambdaMaxInterval = Double.NaN ;
		int indexInterval = 0 ;
		for(int i=0; i<M-1; i++){
			if(lambdaNm>=lambda_nm[i] && lambdaNm<=lambda_nm[i+1]){
				lambdaMinInterval = lambda_nm[i] ;
				lambdaMaxInterval = lambda_nm[i+1] ;
				indexInterval = i ;
			}
		}
		double weightLeft = (lambdaNm-lambdaMinInterval)/(lambdaMaxInterval-lambdaMinInterval) ;
		double weightRight = 1 - weightLeft ;
		neffEven = (1-weightLeft)*getNeffFromDatabase(indexInterval, gapNm, "even") + (1-weightRight)*getNeffFromDatabase(indexInterval+1, gapNm, "even") ;

		return neffEven ;
	}

	public double[] getNeffEven(double lambdaNm, double[] gapNm){
		double[] neff = new double[gapNm.length] ;
		for(int i=0; i<neff.length; i++){
			neff[i] = getNeffEven(lambdaNm, gapNm[i]) ;
		}
		return neff ;
	}

	public double getNeffOdd(double lambdaNm, double gapNm){
		double neffEven = Double.NaN ;
		double[] lambda_nm = MathUtils.linspace(LAMBDA_MIN, LAMBDA_MAX, 2.5) ;
		// step 1: find lambda_min and lambda_max interval
		int M = lambda_nm.length ;
		double lambdaMinInterval = Double.NaN ;
		double lambdaMaxInterval = Double.NaN ;
		int indexInterval = 0 ;
		for(int i=0; i<M-1; i++){
			if(lambdaNm>=lambda_nm[i] && lambdaNm<=lambda_nm[i+1]){
				lambdaMinInterval = lambda_nm[i] ;
				lambdaMaxInterval = lambda_nm[i+1] ;
				indexInterval = i ;
			}
		}
		double weightLeft = (lambdaNm-lambdaMinInterval)/(lambdaMaxInterval-lambdaMinInterval) ;
		double weightRight = 1 - weightLeft ;
		neffEven = (1-weightLeft)*getNeffFromDatabase(indexInterval, gapNm, "odd") + (1-weightRight)*getNeffFromDatabase(indexInterval+1, gapNm, "odd") ;

		return neffEven ;
	}

	public double[] getNeffOdd(double lambdaNm, double[] gapNm){
		double[] neff = new double[gapNm.length] ;
		for(int i=0; i<neff.length; i++){
			neff[i] = getNeffOdd(lambdaNm, gapNm[i]) ;
		}
		return neff ;
	}

	// database of even and odd modes
	private double getNeffFromDatabase(int index, double gapNm, String mode){
		double neff = Double.NaN ;
		double[] gap = {50.0, 73.684210526315789474, 97.368421052631578947, 121.05263157894736842, 144.73684210526315789, 168.42105263157894737, 192.10526315789473684, 215.78947368421052632, 239.47368421052631579, 263.15789473684210526, 286.84210526315789474, 310.52631578947368421, 334.21052631578947368, 357.89473684210526316, 381.57894736842105263, 405.26315789473684211, 428.94736842105263158, 452.63157894736842105, 476.31578947368421053, 500.0} ;
		if(index == 0){
			double[] nEven = {2.4314981219115194833, 2.3931655498725055153, 2.3694690371301638798, 2.3535011061122337317, 2.3421796769670648608, 2.3338737395709951983, 2.3275944712941147863, 2.3227657673600266008, 2.3189925641989668215, 2.3160154584626702068, 2.3136364913969358348, 2.3117324734920741136, 2.3101911170822888586, 2.308948764764812811, 2.3079290246165391487, 2.3071062713599661542, 2.3064263525388626341, 2.3058748280416132559, 2.3054198642505241423, 2.3050460282793459044} ;
			double[] nOdd = {2.2580268251686299585, 2.2623174171883522199, 2.2669928558248724215, 2.2716558551111094566, 2.2760689334168549003, 2.2800940372713554005, 2.2836723865082304563, 2.2867965472792604054, 2.2894830426211991714, 2.2917741342157134099, 2.2937058923969999569, 2.2953311040576727109, 2.2966873523405539892, 2.2978228475957660493, 2.298759256338525514, 2.2995440694470192788, 2.3001884937255661079, 2.300726205764290544, 2.3011688672469476913, 2.3015351654245930213} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 1){
			double[] nEven = {2.4290548117755230706, 2.3905176579129840952, 2.3666671418248750314, 2.3505802095922954109, 2.3391649622367136629, 2.3307839036050026493, 2.324443386414414725, 2.3195642532480253983, 2.315749107488271008, 2.3127368999898587631, 2.3103283168789396917, 2.3083992745411276992, 2.3068366479435100658, 2.3055762373403276833, 2.3045410435771871427, 2.3037051601958964397, 2.3030139765169663768, 2.3024528612711212538, 2.3019896944343307688, 2.3016088382573274274} ;
			double[] nOdd = {2.2541501046254763807, 2.2584536629252909279, 2.2631489378706959315, 2.2678365643328062262, 2.2722772121259082745, 2.2763311980918903288, 2.2799384881818629545, 2.283090689381095828, 2.2858036479027994403, 2.2881192662996991949, 2.2900733523391112456, 2.291718668987858365, 2.2930928323378432232, 2.2942441828295985218, 2.2951944854917676331, 2.2959914798045470974, 2.2966464718805448264, 2.2971933609131167664, 2.2976439448038741276, 2.2980170729811035812} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 2){
			double[] nEven = {2.4266156456015850473, 2.3878741833759375979, 2.3638696070129716631, 2.3476634377048033464, 2.3361540761942061195, 2.3276975717897685492, 2.3212954781785222202, 2.3163656089933217785, 2.3125082277043707002, 2.3094606448471672877, 2.3070221917247559773, 2.305067896787631021, 2.3034837801302292526, 2.3022051129806229142, 2.3011542904723043534, 2.3003051138438945777, 2.2996025184970845245, 2.2990316837430744279, 2.2985601864553277807, 2.2981722001497164598} ;
			double[] nOdd = {2.2502701870651962146, 2.2545866228465394343, 2.2593016911528236434, 2.2640139420794862524, 2.2684822046195529666, 2.2725651650916396385, 2.2762015115050431291, 2.2793819104063390846, 2.2821214910228326822, 2.2844618167852877022, 2.2864384096486034537, 2.2881040034955555384, 2.2894962572371770904, 2.2906636345877995353, 2.2916279849409213476, 2.2924373133282411885, 2.2931030091108817182, 2.2936592019989530122, 2.2941178222682667709, 2.2944978867020875413} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 3){
			double[] nEven = {2.4241806197487756336, 2.3852351542643313032, 2.3610764560383565858, 2.3447508289934204662, 2.3331470543417025532, 2.3246147902077067826, 2.3181508059347462058, 2.3131698889584546563, 2.3092699803388989643, 2.306186740445977712, 2.3037181678834683929, 2.3017383781629039419, 2.3001325691746314916, 2.2988354449548187297, 2.2977688150309623083, 2.2969061826934571435, 2.2961920243678832776, 2.2956113341239450243, 2.2951313893033788993, 2.2947361710943323665} ;
			double[] nOdd = {2.246387094032463061, 2.2507163163510579551, 2.2554511271017023688, 2.2601880138961227829, 2.2646839334959034673, 2.2687959522310490179, 2.2724614791160142602, 2.2756702095811491837, 2.2784365817442027158, 2.2808017794613992812, 2.2828010661268018922, 2.2844871209049264493, 2.2858976424843864272, 2.28708120389374292, 2.2880597745393220777, 2.2888815819944112739, 2.2895581169698533408, 2.2901237425343641263, 2.290590520811516928, 2.2909776244197885831} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 4){
			double[] nEven = {2.4217497404112511283, 2.3826005803170229314, 2.3582877184266752835, 2.3418424193653661902, 2.330143948565437384, 2.3215356073300519313, 2.3150094142109760575, 2.3099771411989076242, 2.3060344130253467299, 2.3029152549902054403, 2.3004163020660035599, 2.2984107911599225282, 2.2967830664883921443, 2.2954672884448066306, 2.2943846587416043548, 2.2935084175944902007, 2.2927825444637495167, 2.2921918693154617053, 2.2917033539203943704, 2.2913007886043414985} ;
			double[] nOdd = {2.2425008461761777312, 2.2468427576323959372, 2.2515972683834992729, 2.256358778409612853, 2.2608824023475957432, 2.2650235605857345078, 2.2687183924703600013, 2.2719556000296852183, 2.2747489271508811726, 2.2771391736500530278, 2.2791613285088159202, 2.280868024891336443, 2.282296987736510463, 2.2834969144122143625, 2.2844898543041969319, 2.285324290252660262, 2.2860118150456121278, 2.2865869993187821763, 2.287062053554394403, 2.2874563031866728124} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 5){
			double[] nEven = {2.4193230060338031251, 2.3799704814760973548, 2.3555034184921548324, 2.3389382460983276779, 2.3271447984472377613, 2.3184600701217501495, 2.3118713542011022355, 2.3067874232535539036, 2.302801586239408671, 2.2996462314050059028, 2.2971166465876105001, 2.295085174687049534, 2.2934353197026089433, 2.2921006953730325151, 2.291001896689190076, 2.2901118681825827217, 2.289374138381167878, 2.2887733354718378109, 2.2882761279674328492, 2.2878661048820321255} ;
			double[] nOdd = {2.2386114623887118924, 2.2429659726285229304, 2.2477401215712036198, 2.2525262566102481898, 2.257077627212652704, 2.2612480146119975366, 2.2649722552117492747, 2.2682380894309681629, 2.2710585302587582568, 2.2734740022122106318, 2.2755192068703120611, 2.2772467237304918619, 2.2786943081498343133, 2.2799107680334627091, 2.280918246114897574, 2.2817654629987615955, 2.2824641116178612243, 2.2830489842628018948, 2.2835324319880898614, 2.2839339392375870297} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 6){
			double[] nEven = {2.4169004219106846598, 2.3773448753099537534, 2.3527235897575820012, 2.3360383436286604741, 2.3241496431153421121, 2.3153882294253982366, 2.3087366789984793414, 2.3036007894574250798, 2.299571551947659831, 2.2963797230627638335, 2.2938192627199458506, 2.2917615942603664081, 2.2900893895555527457, 2.2887357207752527799, 2.2876205640037210465, 2.2867165865761385213, 2.2859668463761835255, 2.2853557803215709399, 2.2848497558154736709, 2.2844321681361892118} ;
			double[] nOdd = {2.23471896807098247, 2.239085960631942207, 2.2438797069332228062, 2.2486904661898980962, 2.2532696228624589097, 2.2574693149160274253, 2.2612230886346385006, 2.2645176859885145504, 2.2673654075943012742, 2.2698062794933928643, 2.2718747129521963402, 2.2736232330225170095, 2.2750896157078046578, 2.2763227738856612881, 2.2773449517085917471, 2.2782051064438659793, 2.2789150212025077735, 2.2795097351389874696, 2.2800016773512621349, 2.2804105503860032655} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 7){
			double[] nEven = {2.4144819849244214538, 2.3747237683617470339, 2.3499482489675997954, 2.3331427468267325054, 2.3211585289083207506, 2.3123201266648574226, 2.3056054369983565167, 2.3004172849492237063, 2.2963443624450312619, 2.293115799925476761, 2.290524191679129018, 2.2884401045876181513, 2.2867453318123165396, 2.2853724119327716302, 2.2842407177726302692, 2.2833226260514165595, 2.2825607239154916961, 2.2819392603700379141, 2.2814242930930244135, 2.2809990203945709197} ;
			double[] nOdd = {2.2308233839593620829, 2.2352027638033868939, 2.240016046211952716, 2.2448514163031934032, 2.2494583962763883278, 2.25368747448008655, 2.2574708943047192555, 2.2607944040949319309, 2.2636695638601076475, 2.2661360102834153807, 2.2682278509778663889, 2.2699975584042064725, 2.2714829171015020748, 2.272732954785030568, 2.2737699911171582734, 2.2746432366405260339, 2.2753645623661911124, 2.2759692144455323515, 2.2764698079963459065, 2.2768861589897961828} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 8){
			double[] nEven = {2.4120677015195277626, 2.3721071844954879637, 2.3471774344319444872, 2.3302514931927613695, 2.3181714959229484663, 2.3092558134657577007, 2.3024776806647127003, 2.2972369718829019902, 2.2931200737949875013, 2.2898545042417244311, 2.2872315102718259183, 2.2851207506376751688, 2.2834031989690308784, 2.2820108320198064789, 2.280862421556983044, 2.2799300425926780633, 2.2791558214093536883, 2.2785238185352989504, 2.2779997820749504633, 2.2775667186326837843} ;
			double[] nOdd = {2.2269247358215591426, 2.231316394500649114, 2.2361491569797942169, 2.2410091292692446707, 2.2456439704584911787, 2.2499025080851327019, 2.2537156887003386707, 2.257068249440199903, 2.2599710088416467002, 2.2624632039196659328, 2.2645786437078112563, 2.2663697123706434411, 2.267874225692033896, 2.2691413086857834536, 2.2701933761698840364, 2.2710798647775951586, 2.2718127490149790937, 2.2724274871633109996, 2.2729368378917147453, 2.2733607776675994749} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 9){
			double[] nEven = {2.4096575712035823713, 2.3694951328599063167, 2.3444111561166902646, 2.3273646222620931745, 2.3151885902887889834, 2.306195340274981298, 2.2993534642695347969, 2.2940598991864158407, 2.2898987486993478413, 2.2865958973018791767, 2.283941257394588753, 2.2818036030829991212, 2.2800630511389967658, 2.2786510383613247654, 2.2774857157992345336, 2.2765388872781215923, 2.2757521946011176617, 2.2751095119851676429, 2.2745762826647650812, 2.2741353073590002687} ;
			double[] nOdd = {2.2230230458122228754, 2.2274268808535304665, 2.2322790605540134834, 2.2371636178154572505, 2.2418263543248273528, 2.2461144355630495717, 2.2499574837817357675, 2.2533392286498568069, 2.25626975526556528, 2.2587878760098991648, 2.2609270852239355953, 2.2627397044244728086, 2.2642635538118263128, 2.265547859790579821, 2.2666151206702767062, 2.2675150096056486682, 2.268259596811042389, 2.2688845550594107792, 2.2694027911759180327, 2.2698344287029410538} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 10){
			double[] nEven = {2.4072515957189737357, 2.3668876320965028803, 2.3416494606171633919, 2.3244821631424468222, 2.3122098571304454673, 2.3031387500478213148, 2.2962328383684855737, 2.2908861232949000453, 2.2866804344746047839, 2.2833400357113844414, 2.2806535044373577037, 2.2784887159563389503, 2.2767249370470481473, 2.2752930781260922721, 2.2741106689751426906, 2.2731492154512649151, 2.2723498965245578773, 2.2716963968218943926, 2.2711538463513587516, 2.2707048410144849981} ;
			double[] nOdd = {2.2191183484124947789, 2.2235342392333361516, 2.2284057673017985124, 2.2333149041294997339, 2.238005562747511501, 2.2423232574554075036, 2.2461962929739858197, 2.2496073693676179595, 2.2525658144426214946, 2.2551100278955593659, 2.25727319395506143, 2.2591075428182314511, 2.260650909355226279, 2.2619526258554913944, 2.263035236769804559, 2.2639486867328213471, 2.2647051182660149493, 2.2653404380206327851, 2.2658676787458693624, 2.2663071350171208884} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 11){
			double[] nEven = {2.4048497756242670498, 2.3642846955181524571, 2.33889236270680545, 2.3216041567573073579, 2.3092353309914059878, 2.300086093728926695, 2.2931158542880369922, 2.2877157023218686049, 2.2834651904307357029, 2.2800869791343729709, 2.2773682999340612021, 2.2751761409225261801, 2.2733889294752009924, 2.2719370162707539507, 2.2707373274082010006, 2.2697610806615453605, 2.2689489829839999402, 2.2682845161997740036, 2.2677325184408410053, 2.2672753674362851051} ;
			double[] nOdd = {2.2152106569052283369, 2.2196384976779217624, 2.2245293137288464358, 2.2294630023562351795, 2.2341816225084811798, 2.2385290022303019342, 2.2424321226974690546, 2.2458726729706057768, 2.2488591981988608204, 2.2514296833290865507, 2.2536169840960220689, 2.2554732487510955607, 2.2570363108701547716, 2.2583555920883093826, 2.2594537366980080861, 2.2603809071992571056, 2.2611493387855086112, 2.2617951517662429062, 2.2623315227062512633, 2.2627789149567929528} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 12){
			double[] nEven = {2.4024521119715727124, 2.3616863370324812088, 2.3361398910104740345, 2.3187306374783620555, 2.3062650629076451025, 2.2970374198808842792, 2.2900025632201028714, 2.2845486847859843849, 2.2802530753006036157, 2.2768367813844911929, 2.2740857036796420232, 2.2718659428137417677, 2.2700550717968557279, 2.2685829090798317331, 2.2673657553367272399, 2.266374550233844154, 2.265549507929756512, 2.2648739468995695567, 2.2643123578079595859, 2.2638469461568204721} ;
			double[] nOdd = {2.2113000087937613181, 2.2157396800623545552, 2.2206497041827595318, 2.2256079339038699061, 2.2303545379895766132, 2.2347316783293376119, 2.2386650030757473395, 2.2421351516620555699, 2.2451499184585741453, 2.2477468453396070025, 2.2499584684509668087, 2.2518368300132998172, 2.2534197665878670236, 2.2547567978264688726, 2.2558706491013831297, 2.2568116899128605191, 2.2575922641323513673, 2.2582487127610697542, 2.2587943727154020657, 2.2592497837951452944} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 13){
			double[] nEven = {2.4000586055329780066, 2.3590925697491784696, 2.333392077463487535, 2.3158616399992468793, 2.303299093585109425, 2.2939927788797485064, 2.2868930203546562474, 2.2813851323488094636, 2.2770441479339789126, 2.273589509280111276, 2.2708057811610848908, 2.26855817925528358, 2.2667234355514445099, 2.265230815624181826, 2.2639960107487593355, 2.2629896675277429985, 2.2621515322704590645, 2.261464715926056801, 2.2608934156401625515, 2.2604196261300080195} ;
			double[] nOdd = {2.2073864356557639788, 2.2118378173664585695, 2.2167669794804409911, 2.2217497196077022892, 2.2265243331501576307, 2.2309313003062611891, 2.2348949296665279185, 2.2383948228977006423, 2.2414379892250630988, 2.2440615355890543015, 2.2462976481118013261, 2.2481982954134775987, 2.2498012989557030217, 2.251156252015724224, 2.2522859656324101252, 2.2532410500322730407, 2.2540339224256018547, 2.2547011411179358475, 2.2552561642376121043, 2.2557197657715262196} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 14){
			double[] nEven = {2.3976692557965511021, 2.3565034101535160538, 2.330648929610035669, 2.3129972029098868624, 2.3003374660388788975, 2.2909522210570361089, 2.2837872799481395703, 2.2782250974499369534, 2.2738384632420984843, 2.2703452141555349186, 2.2675285870659656062, 2.2652529123670923639, 2.2633940798953782192, 2.2618807945398962111, 2.2606281488843915639, 2.2596064987316304418, 2.2587551059109252094, 2.2580569001085715186, 2.2574757492242243373, 2.2569934613297144566} ;
			double[] nOdd = {2.2034699591983502032, 2.2079329250724013534, 2.2128811605116491812, 2.217888384619607578, 2.2226910288107304403, 2.2271278861659267179, 2.2311219278003497912, 2.2346517003071002527, 2.2377234201756315279, 2.2403737583787024512, 2.2426345494911585909, 2.2445576682035635052, 2.2461809132908334696, 2.2475539723298303407, 2.2486997219537130377, 2.2496690060523372168, 2.2504743267408429119, 2.2511524603690888924, 2.2517170014690321977, 2.252188888011706247} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 15){
			double[] nEven = {2.3952840669219850334, 2.3539188722402535348, 2.3279104938220473997, 2.3101373587959850298, 2.2973802259878035592, 2.2879157902144990899, 2.2806853925099650482, 2.2750686322564064312, 2.2706360787420356573, 2.267103952136993783, 2.2642541831536981967, 2.2619502038577112835, 2.2600670491211749535, 2.25853290644476834, 2.2572622358995571012, 2.256225102408706995, 2.2553602955823985887, 2.2546505463373915923, 2.2540594208541375743, 2.253568504881407808} ;
			double[] nOdd = {2.1995506151389507821, 2.2040250437469861566, 2.2089922645923918409, 2.2140239466003373003, 2.2188546458181832577, 2.2233214599937070055, 2.2273460153916744275, 2.2309057953619308989, 2.2340062316946478482, 2.2366835287948538813, 2.2389691904066530981, 2.2409149504177809931, 2.2425586250600964, 2.2439499698540750217, 2.2451119315417273903, 2.246095570603674485, 2.2469134919958313468, 2.2476026850071044727, 2.2481768757225619737, 2.2486571680018085928} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 16){
			double[] nEven = {2.3929030382078764205, 2.3513389672209035197, 2.325176788954208984, 2.3072821454496130755, 2.2944274122046719455, 2.2848835357574781568, 2.2775874114287173455, 2.2719158104920622598, 2.2674370573350906, 2.2638658007892424884, 2.2609826427287003092, 2.2586501035820401029, 2.2567424252836181253, 2.2551872133429031742, 2.2538983270414325588, 2.2528455347382427831, 2.2519671508953567063, 2.2512457094128186519, 2.2506444764933073444, 2.2501448142312003853} ;
			double[] nOdd = {2.1956284371331413752, 2.2001141983387464407, 2.2051003232031272105, 2.2101564333899328396, 2.215015202670807426, 2.2195120360277535987, 2.2235672054876589598, 2.2271571311122411174, 2.2302864355042086864, 2.2329908676510714649, 2.2353015641195947971, 2.2372701712537725882, 2.2389344514855324952, 2.240344261890843125, 2.2415226075351371016, 2.242520770704101718, 2.2433514466446822233, 2.2440518331498280347, 2.2446358069289060744, 2.2451246280817409584} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 17){
			double[] nEven = {2.3905261695168462666, 2.3487637095083013783, 2.3224478391146043954, 2.3044315988517234395, 2.291479072316380261, 2.2818555136667120209, 2.2744933915294787141, 2.2687666710332079489, 2.2642414519726319355, 2.2606308045474561297, 2.2577139911259886951, 2.2553526927554661263, 2.2534202563334968517, 2.2518437754149993602, 2.2505364671172936042, 2.2494678601694091391, 2.2485757392415162137, 2.2478424669678940262, 2.2472309796767167001, 2.2467224515255463935} ;
			double[] nOdd = {2.1917034579849343778, 2.1962004136060011561, 2.2012053635998136691, 2.206285862813746057, 2.2111727187901104585, 2.2156996337890184634, 2.2197855175244454173, 2.2234057164860714373, 2.2265640485169346796, 2.2292957879531036802, 2.231631701925700817, 2.2336233313360773778, 2.2353084138926697655, 2.2367368615956046973, 2.2379317473185467158, 2.2389446187941288713, 2.2397882036012677354, 2.240499930665530659, 2.2410938227783239185, 2.2415912875723629227} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 18){
			double[] nEven = {2.3881534609336081409, 2.3461931171528438433, 2.3197236703012475978, 2.3015857520285183391, 2.28853524738552494, 2.2788317647982458958, 2.2714033886781721527, 2.2656212806330939813, 2.2610493269807894201, 2.2573990296189792026, 2.2544483258479202092, 2.2520580191367609579, 2.2501006135372549899, 2.2485026599310780071, 2.2471767648744553902, 2.2460921347619753341, 2.245186112653311028, 2.2444408640009352318, 2.2438189794178997616, 2.2433014740922851971} ;
			double[] nOdd = {2.1877757067421170767, 2.1922837258777212455, 2.1973074071400064966, 2.2024122612654992714, 2.2073272219379322934, 2.2118842746389923981, 2.2160009693119571139, 2.2196515762243116399, 2.2228390859906452803, 2.2255982904881861373, 2.227959627924890551, 2.2299744585416307885, 2.2316805192062747487, 2.2331277924266510482, 2.2343394327962640133, 2.2353671329157753789, 2.2362237803092099853, 2.2369469987548691314, 2.2375509412969312173, 2.2380571684141306044} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 19){
			double[] nEven = {2.3857849135448585542, 2.343627198635390485, 2.3170043085687019868, 2.2987446426051305615, 2.2855959786894128882, 2.2758123441418498523, 2.2683174527703324763, 2.2624796869853769365, 2.2578607441665736744, 2.2541705392974522582, 2.2511857029446740164, 2.248766150733422009, 2.2467835539059257677, 2.245163920984421857, 2.2438192372395251439, 2.2427184277038745286, 2.241798342924071985, 2.2410409583528423383, 2.2404085609752022457, 2.2398819230891775511} ;
			double[] nOdd = {2.1838452295772610157, 2.1883641706090113388, 2.1934064883714148309, 2.1985356616407680796, 2.2034787265556454727, 2.2080659790097332262, 2.212213583164031494, 2.2158947199106457937, 2.2191115617828529594, 2.2218984275311868259, 2.2242853420246642138, 2.2263235641299865541, 2.228050789897921824, 2.2295170705447389103, 2.2307455981859902749, 2.231788334719844169, 2.2326582027775412342, 2.2333930558351777762, 2.2340071799626661786, 2.2345223189000718023} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 20){
			double[] nEven = {2.3834205245249719951, 2.3410659653781218381, 2.3142897782969202858, 2.2959083017557730955, 2.2826613124000258992, 2.2727972982550106451, 2.265235640315583332, 2.2593419598915973623, 2.2546757591907615748, 2.2509453898095550528, 2.2479261679291266951, 2.2454771537411173377, 2.2434691437541633974, 2.2418276274955935001, 2.2404639623059283693, 2.239346794829178755, 2.2384124878317219753, 2.2376428190403845342, 2.2369997529064056252, 2.2364638812249912903} ;
			double[] nOdd = {2.1799120564399685485, 2.1844417753267841853, 2.1895026432072195455, 2.194656086050529531, 2.1996272667650824673, 2.2042447649160208378, 2.2084233738942722347, 2.2121351721954463088, 2.2153815011664170775, 2.2181961825759644036, 2.2206088626036715183, 2.2226706602570054372, 2.2244192423044646389, 2.2259047079673575098, 2.2271503189727019922, 2.2282082475334830107, 2.2290914964682944088, 2.2298381218469356391, 2.2304628598190618938, 2.2309867256456250573} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 21){
			double[] nEven = {2.3810603013542874784, 2.3385094315771999263, 2.3115801023390782909, 2.2930767683312698324, 2.2797312906438502722, 2.2697866794186203343, 2.2621580068752704662, 2.2562081478715727556, 2.2514944345933955994, 2.2477236514952245727, 2.2446698045162940538, 2.2421910820379311602, 2.2401574484740010007, 2.2384938402740326424, 2.2371110171831274371, 2.2359773067056925022, 2.235028601182585728, 2.2342465000417885967, 2.2335926437083428731, 2.233047395420643344} ;
			double[] nOdd = {2.1759762235611224135, 2.1805165780278699117, 2.1855958950678804342, 2.190773561610050546, 2.1957728639840610185, 2.2004206640605343814, 2.2046303666607682814, 2.2083729524954902601, 2.2116489170546946852, 2.2144915806457219354, 2.2169302132170272124, 2.2190157793947626885, 2.2207858943404987784, 2.2222907307974058, 2.2235536054555424812, 2.2246268774371094068, 2.2255236642469347075, 2.2262822264318558041, 2.2269171300191565877, 2.2274504432797037623} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 22){
			double[] nEven = {2.3787042349441009925, 2.3359576107382298282, 2.3088753092805021083, 2.2902500752060697131, 2.2768059599402445947, 2.2667805352257999196, 2.2590846018510557514, 2.2530783157819773699, 2.2483168239989845816, 2.2445053828661301054, 2.2414166658004375243, 2.2389080104457335096, 2.2368485370310824401, 2.2351626330898271, 2.2337604410822495815, 2.2326100180340016088, 2.231646764173163433, 2.2308520667750877386, 2.2301872793056505273, 2.2296325264364442731} ;
			double[] nOdd = {2.1720377705707001326, 2.1765886165501431293, 2.1816862781610315558, 2.1868881223543334968, 2.1919155474062765876, 2.1965936928244387261, 2.2008345846659191913, 2.204608081110225104, 2.2079138328579741568, 2.2107846549711225315, 2.2132494137072704632, 2.215358923768645294, 2.2171507667127738905, 2.2186751564195148489, 2.2199554523744620127, 2.2210442644763852549, 2.2219547502006502526, 2.2227253943550953075, 2.2233709534069108216, 2.2239134835406173529} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 23){
			double[] nEven = {2.3763523312995027403, 2.3334105184665401289, 2.3061754199757178441, 2.2874282577864093469, 2.2738853576818174318, 2.2637789165388126911, 2.2560154870046833508, 2.2499525202696672999, 2.2451430091769655206, 2.2412906445198035321, 2.2381668212229435255, 2.2356279972630721531, 2.2335424614001881949, 2.2318340638260423248, 2.230412323153502907, 2.2292450004210695447, 2.2282670255523413516, 2.2274595941723016601, 2.2267837250201512056, 2.2262193430054457721} ;
			double[] nOdd = {2.1680967466082941009, 2.1726579201148230602, 2.1777738268114688047, 2.1829997900900712793, 2.1880553376601765692, 2.1927638833235265636, 2.1970360406197189107, 2.2008405757073363773, 2.2041762597487166708, 2.2070754073510219229, 2.2095664742285814341, 2.2117001185992704038, 2.2135138668065987844, 2.2150579988848102531, 2.216355915830587886, 2.2174604148977499207, 2.2183847623229451251, 2.2191676371717665717, 2.219823873705050854, 2.2203758689488695133} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 24){
			double[] nEven = {2.3740045853983571256, 2.3308681610115877803, 2.3034804612121062561, 2.284611355322708981, 2.2709695319521268075, 2.2607818711270053491, 2.2529507106014161621, 2.2468308172099140663, 2.241973029845833576, 2.2380794963930266128, 2.234920335224145127, 2.2323511267525271151, 2.2302392988442711896, 2.228508199154804803, 2.2270667139098292431, 2.2258823185301470637, 2.2248894480091694348, 2.224069126033059618, 2.2233820420369285742, 2.2228079075027658007} ;
			double[] nOdd = {2.1641531842151788823, 2.1687245366735954377, 2.1738585749260241897, 2.1791086064025693148, 2.1841922680522540823, 2.1889312487384033901, 2.1932347736863979648, 2.1970704584876954435, 2.2004362264305221686, 2.203363868839316897, 2.205881419834029078, 2.2080393890927374478, 2.2098752364149896188, 2.2114392887284095579, 2.2127549911665269633, 2.2138753595826710097, 2.2148137246556336422, 2.2156089774420255623, 2.2162760974969502037, 2.2168376394378643823} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 25){
			double[] nEven = {2.3716609990970600741, 2.328330555368855137, 2.3007904566742714003, 2.2817993918209507065, 2.2680585185272663651, 2.2577894503019986239, 2.2498903339489975117, 2.2437132639799179934, 2.2388069579101239626, 2.234872020293906747, 2.231677269260557761, 2.2290774376942001922, 2.2269391142926036053, 2.2251851116443126521, 2.223723685152706242, 2.2225220383276718117, 2.2215141400477973477, 2.2206807475101220106, 2.2199822929859993614, 2.2193982655692869876} ;
			double[] nOdd = {2.1602071290410549409, 2.1647884997036150878, 2.169940557547378468, 2.1752145919451670864, 2.1803263658263865032, 2.1850958269330598149, 2.189430796523606837, 2.193297754071833694, 2.1966937569867241997, 2.1996500564252632337, 2.2021942664665021816, 2.204376743478563494, 2.2062348806191263151, 2.2078190351945354841, 2.2091527090914659937, 2.2102891164498310594, 2.2112416667997418784, 2.2120494555988896579, 2.2127276019960957498, 2.2132988092336893793} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 26){
			double[] nEven = {2.3693215708434780531, 2.3257977118238701841, 2.2981054277920076601, 2.2789924135161694352, 2.2651523660058190401, 2.2548017008182932308, 2.2468344053873616772, 2.2405999254019213218, 2.2356448529777339651, 2.2316682678928532191, 2.228437696413545055, 2.2258070164757945975, 2.2236419746912714501, 2.2218648601520967212, 2.2203833035287892095, 2.2191642264470794466, 2.2181410867931283804, 2.2172945157733146004, 2.2165846310244718964, 2.2159905029286437461} ;
			double[] nOdd = {2.1562586280260251925, 2.1608498490217158405, 2.1660198093746911852, 2.1713177884141985352, 2.1764576632083159069, 2.1812576437096349302, 2.1856241376891474282, 2.1895224874375891488, 2.1929488638027483383, 2.1959339855355888282, 2.1985050459092727593, 2.2007122076903087304, 2.2025928307740443302, 2.204197266487924356, 2.2055490929986891757, 2.2067017168935763038, 2.2076686302967356568, 2.2084890897699640533, 2.209178399141441318, 2.2097594057209852814} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 27){
			double[] nEven = {2.3669863049224981744, 2.3232696364661462596, 2.2954254011784094303, 2.2761904388365694629, 2.262251119782058062, 2.2518186747126285319, 2.2437829814546912388, 2.2374908579916001905, 2.2324867810725992356, 2.2284683024592251144, 2.2252016733929336212, 2.2225399223772908108, 2.2203479557852934256, 2.2185475193938359872, 2.2170456455093940917, 2.2158089537608551822, 2.2147704180297997922, 2.2139104912155436189, 2.2131888858988393309, 2.2125846767076282617} ;
			double[] nOdd = {2.1523077208677201533, 2.1569086239343833178, 2.1620963771949215371, 2.1674182319184329693, 2.1725861881033461387, 2.1774167222061162619, 2.1818148208548646672, 2.1857446779035827333, 2.1892015763098311432, 2.1922156839934072714, 2.1948137680898294199, 2.1970458145630877844, 2.1989490826090358766, 2.2005740074374844362, 2.2019441603721849887, 2.2031131692185463855, 2.2040945766003963158, 2.2049278971092833856, 2.2056285177518941687, 2.2062194734563638221} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 28){
			double[] nEven = {2.3646551940184816765, 2.3207463466027773435, 2.2927503951436589702, 2.2733935157225042545, 2.2593548169841297657, 2.2488404236944501413, 2.2407361223040291875, 2.2343861234407924599, 2.2293327987006814617, 2.2252721917396791618, 2.2219692785682232383, 2.2192762276753335016, 2.2170571124428768428, 2.2152331571431247426, 2.213710765244444989, 2.2124562803420109169, 2.2114021945841284555, 2.2105287515648597285, 2.2097953490728738934, 2.2091808502219061339} ;
			double[] nOdd = {2.1483544583867475453, 2.152964879541320542, 2.1581702887166049898, 2.1635159501033123242, 2.1687119763206572642, 2.1735730940639430564, 2.1780028764513179595, 2.1819643569701576702, 2.1854519177138711505, 2.1884951786094277715, 2.1911204637529944073, 2.1933775639192072404, 2.1953036849080720394, 2.1969492714273064493, 2.1983379455261586877, 2.1995235085002105002, 2.2005195958548418034, 2.2013658290899931202, 2.2020779940338068847, 2.2026790290687858764} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 29){
			double[] nEven = {2.3623282392658069284, 2.3182278542632870355, 2.290080438604509272, 2.2706016741310488527, 2.2564635010708831153, 2.2458669948035447916, 2.2376938817973921481, 2.2312857789295930111, 2.2261829700344288874, 2.2220800038928554265, 2.2187405651609446444, 2.2160159919675121998, 2.213769522331563433, 2.2119218379650482653, 2.2103787470771893986, 2.2091062906018001932, 2.208036472300531905, 2.2071493561129558181, 2.206404011764576012, 2.205779095507107268} ;
			double[] nOdd = {2.1443988859401352798, 2.1490186471482712882, 2.1542415946902222501, 2.1596109850242726225, 2.1648350622648373509, 2.1697267952795824542, 2.1741883287015779658, 2.1781815450554806723, 2.1816999092294322438, 2.1847724814801212645, 2.1874251346083353198, 2.1897074954227688792, 2.191656653014355971, 2.1933230922990132328, 2.1947304587443183799, 2.195932757810453495, 2.1969436875610921511, 2.1978031687857493282, 2.1985268504354333885, 2.1991380929067401162} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 30){
			double[] nEven = {2.3600054398809517942, 2.3157141651515003034, 2.2874155542247605055, 2.2678149439047188274, 2.253577212242023009, 2.2428984396705291537, 2.2346563104688894619, 2.2281898876956618416, 2.2230373660466118402, 2.218891800833258543, 2.2155156158774516051, 2.2127592999038490085, 2.2104852504119869572, 2.2086136431072751485, 2.2070496479810497448, 2.2057590389119936525, 2.2046733281065349352, 2.2037723858395081855, 2.2030149539818317805, 2.2023794783421433152} ;
			double[] nOdd = {2.1404410600054326608, 2.1450699817577234541, 2.1503103315989844369, 2.1557033737157098585, 2.1609554707331297685, 2.165877848908202008, 2.1703712124447003262, 2.1743962730041621612, 2.1779455780039409518, 2.1810476252406658659, 2.1837278492931013751, 2.1860356254549659916, 2.1880080117165912057, 2.189695486390298651, 2.1911217264669824445, 2.192340938504710568, 2.1933668942670223601, 2.1942396782155761947, 2.1949751144033564643, 2.1955967027824803139} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 31){
			double[] nEven = {2.3576867936506382684, 2.3132052954940478529, 2.284755761780081329, 2.2650333628749437231, 2.2506959985424472848, 2.2399347988825910605, 2.2316234666668521847, 2.2250984960659092593, 2.219896041752991156, 2.2157076515570262032, 2.2122944873447969449, 2.209506190937559289, 2.2072043690054146126, 2.2053086391528782251, 2.2037235421895804421, 2.2024146043833594533, 2.2013128289985477437, 2.200397897068415709, 2.1996282311780728236, 2.1989820635688777095} ;
			double[] nOdd = {2.1364810272394696433, 2.1411189249361948228, 2.1463765392632323525, 2.1517931535976919655, 2.1570732469853282076, 2.1620262913796888249, 2.1665515516454134648, 2.170608559046133923, 2.1741889491744190721, 2.1773206749636981883, 2.1800285911540306927, 2.182361989379105971, 2.1843577970452807691, 2.1860664868441008757, 2.187511791686327367, 2.1887480834884431857, 2.1897892110505896568, 2.1906754793714218188, 2.1914228101265638138, 2.1920548988698342896} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 32){
			double[] nEven = {2.3553723014579293071, 2.3107012503311019636, 2.2821010836412409795, 2.2622569617519001639, 2.2478199008320745023, 2.2369761336276146046, 2.2285954045704987614, 2.2220116783257162218, 2.2167590621029558129, 2.2125276208568966929, 2.209077253782703476, 2.2062567903756002963, 2.203926895275456932, 2.2020068852267131732, 2.200400512420299215, 2.1990730571035204122, 2.1979550463605348476, 2.1970259683580866117, 2.1962439185437254707, 2.1955869213744798607} ;
			double[] nOdd = {2.1325188411132862676, 2.1371655210727702467, 2.1424402684065619873, 2.147880365970145089, 2.15318842418848444, 2.1581721525901178538, 2.1627293822330400097, 2.1668184425716727759, 2.1704300530246047884, 2.173591532108885449, 2.1763273910373417408, 2.1786865918127462649, 2.1807059860245292526, 2.182436104709444713, 2.1839006442604178559, 2.1851542186603918339, 2.1862106928444275944, 2.1871106035100522647, 2.1878699739347786668, 2.1885126794131366523} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 33){
			double[] nEven = {2.3530619584599965499, 2.3082020442674546779, 2.2794515425733563596, 2.2594857741430978137, 2.2449489516923901711, 2.2340224857234418643, 2.2255721805264561119, 2.2189294966130233, 2.2136264908387648376, 2.2093517756058265178, 2.2058639854167405581, 2.2030111241170531322, 2.2006530679709777054, 2.1987084652716255562, 2.1970806206601727339, 2.1957344676938230776, 2.1946000495465352031, 2.1936566767899936536, 2.1928620947528547624, 2.1921941260443467137} ;
			double[] nOdd = {2.1285545448429301629, 2.1332098333363624931, 2.1385015604010786383, 2.1439650472887445964, 2.1493010418703764053, 2.154315469839592545, 2.1589047298634884697, 2.1630259538703517919, 2.1666689104641845276, 2.1698603530450744081, 2.1726242884879973793, 2.1750094721193984348, 2.1770526580676938799, 2.1788043712027262977, 2.1802883450835426338, 2.1815593567863262869, 2.1826313545144331307, 2.1835450483917990816, 2.1843166350627454264, 2.184970107345319601} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 34){
			double[] nEven = {2.3507557673538821419, 2.3057076888088987587, 2.276807161468259455, 2.2567198300336870354, 2.2420832014821727718, 2.23107390841907538, 2.2225538500613115644, 2.215852002548597266, 2.2104983992914770674, 2.2061801807296710365, 2.202654743616401678, 2.1997692505978436728, 2.1973827892893984526, 2.1954134529649800278, 2.1937639368373553772, 2.1923989080493893056, 2.1912479219367262395, 2.1902900670293008467, 2.1894828337275518138, 2.1888037494880476785} ;
			double[] nOdd = {2.1245882097499659835, 2.1292518942074787347, 2.1345604643950948365, 2.140047254361044704, 2.1454111397055850574, 2.1504562852098869641, 2.1550776263467827931, 2.1592311145428064734, 2.1629055550907061445, 2.1661271104754358241, 2.1689193027632929223, 2.1713306488550485618, 2.1733978132459781385, 2.1751713188970298596, 2.1766749027533607297, 2.1779635351387445219, 2.1790512333869855865, 2.1799788872973837606, 2.1807628229088900085, 2.1814272028932388814} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 35){
			double[] nEven = {2.3484537231222617493, 2.3032181916300467073, 2.274167960049449988, 2.2539591636308742295, 2.2392226926525391484, 2.2281304492464735212, 2.2195404661739517316, 2.2127792588404813223, 2.2073748418777716651, 2.2030129097051833753, 2.1994496041262734387, 2.1965312746823904, 2.1941161867114100659, 2.19212192008248552, 2.1904505428478038276, 2.1890664509552668626, 2.1878987020562359334, 2.1869262411575740579, 2.1861061630000109268, 2.1854158508881353917} ;
			double[] nOdd = {2.1206198831305322905, 2.1252917770623604987, 2.130617081321915407, 2.1361270195004742334, 2.1415187458960489586, 2.1465946212108306668, 2.1512481125975164709, 2.1554339578359344998, 2.1591400281242969506, 2.1623918382736015964, 2.1652124606963512043, 2.1676501591422465687, 2.1697414857470791461, 2.171536967111001637, 2.1730603259435277153, 2.1743667862900055709, 2.1754703473162462224, 2.1764121137106053894, 2.1772085617592504825, 2.1778839931410751696} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 36){
			double[] nEven = {2.3461558224980416654, 2.3007335565053752546, 2.2715339608302120844, 2.2512038065902011397, 2.2363674585125776773, 2.2251921572439776753, 2.2165320923051958779, 2.2097113232967089402, 2.2042558911155976098, 2.1998500196000358997, 2.1962486368443929763, 2.1932972669622814443, 2.1908533357627386629, 2.1888339300005674737, 2.1871405152519067805, 2.1857371821094231379, 2.1845525252828856821, 2.1835652687327327115, 2.182732210442459575, 2.1820305139670717054} ;
			double[] nOdd = {2.1166496295234984437, 2.1213295187689436005, 2.1266712970064345356, 2.1322043864567370441, 2.1376239163130423826, 2.1427305256415052348, 2.1474162270139207642, 2.1516345220206378741, 2.1553723268266722357, 2.1586545711508469125, 2.1615037891280026727, 2.1639680266055223434, 2.1660837035576725462, 2.167901350022529261, 2.1694447187988630255, 2.170769133692812769, 2.1718887300364242421, 2.1728447593648851921, 2.1736538884544214234, 2.1743405256907131218} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 37){
			double[] nEven = {2.3438620675250083636, 2.2982537998925849365, 2.2689051858951647667, 2.2484537934216723976, 2.2335175544783925083, 2.2222590823659196246, 2.2135287722765020213, 2.2066482677746814822, 2.2011416029041672715, 2.1966915843894501137, 2.1930519068743721256, 2.1900672732880130944, 2.1875943089851483947, 2.1855495694071875867, 2.1838339103157089482, 2.1824111558448024972, 2.1812094169355806805, 2.1802071944602956499, 2.1793610306789328313, 2.1786478105266207095} ;
			double[] nOdd = {2.112677501284022874, 2.1173651829043262929, 2.1227233243637866344, 2.128279410139939376, 2.1337266854267444849, 2.1388640406160774887, 2.1435819852856705658, 2.1478328330868272644, 2.15160252252141726, 2.154915330652267702, 2.1577933149400170265, 2.1602842620403159835, 2.1624244896082900347, 2.1642644860070165969, 2.1658280244323635522, 2.1671706086147657366, 2.1683064095158921525, 2.1692769165763645667, 2.1700988389079345353, 2.1707968085447486573} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 38){
			double[] nEven = {2.3415724533922932515, 2.2957789316366783439, 2.2662816555467193425, 2.2457091548777343704, 2.2306730057182035942, 2.2193312684524766354, 2.2105305659753922143, 2.2035901346530657463, 2.1980320529004564456, 2.1935376810482010157, 2.1898594944889580027, 2.1868413897692957626, 2.1843391757548111798, 2.1822689040890419498, 2.1805308209304117284, 2.1790884697935033465, 2.1778694640867759524, 2.1768521595577556837, 2.1759926912078828565, 2.1752678141365158204} ;
			double[] nOdd = {2.1087035640011464466, 2.1133988278589095344, 2.118773166263295149, 2.1243521306881114619, 2.1298271064192353386, 2.1349951845621495394, 2.1397454423609305607, 2.1440289335643214486, 2.1478306091026122537, 2.1511741535234825129, 2.1540810797993268366, 2.1565989264299054717, 2.1587638746810102752, 2.1606264151065963652, 2.1622103123572746775, 2.1635712406172746824, 2.1647234287685099829, 2.1657085389559274091, 2.166543436085566654, 2.1672528758682458871} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 39){
			double[] nEven = {2.3392869794710700049, 2.2933089515848923412, 2.2636633888671089387, 2.242969917756992615, 2.2278338667211099455, 2.2164087696645187187, 2.2075375320088377329, 2.2005369966113215163, 2.1949272962036823209, 2.190388361615707602, 2.1866714676146572494, 2.1836196830635454802, 2.1810880189154322473, 2.1789920216377387518, 2.1772313051180214316, 2.175769178712834595, 2.1745327402968732677, 2.1735001767843820097, 2.1726272836642328556, 2.1718906006723028845} ;
			double[] nOdd = {2.1047278820849171233, 2.1094305059322335794, 2.1148208625366105018, 2.1204225982204589762, 2.1259252102719794486, 2.1311240292308237798, 2.1359066269393878201, 2.1402228476857683148, 2.1440566430175258539, 2.1474310689981308542, 2.1503671031933544455, 2.1529120246890811607, 2.1551018904067618109, 2.1569871598349696917, 2.1585915997121420951, 2.1599710504137177303, 2.1611398103582000196, 2.1621396979538967109, 2.1629877189871664633, 2.16370881831562345} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 40){
			double[] nEven = {2.3370056399408212222, 2.2908438791462493178, 2.2610504064375356315, 2.2402361134939003939, 2.2250001633302329829, 2.2134916391114494161, 2.2045497194376100225, 2.1974889142547180398, 2.1918273993856582926, 2.1872437063754439635, 2.1834878788092244584, 2.1804022228245538706, 2.177840905377797398, 2.1757189783128834115, 2.1739354689112935226, 2.1724533730755171135, 2.1711993361898516142, 2.1701513374209335794, 2.1692648669931555716, 2.1685162171136367348} ;
			double[] nOdd = {2.1007505172002520766, 2.1054602774974191526, 2.110866493243137576, 2.1164908651359195524, 2.1220210546468596391, 2.1272507317505273683, 2.1320655830154793264, 2.136414621214320686, 2.1402806610717890479, 2.1436861045952508853, 2.1466514100456177694, 2.1492236015819723427, 2.1514385652781244929, 2.1533467574834714853, 2.1549719331076362394, 2.1563700829271135184, 2.1575555673177260196, 2.1585703894828669469, 2.159431736995899076, 2.1601646002368517507} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		return neff ;

	}


	// for test *******
	public static void main(String[] args){
		double[] g = MathUtils.linspace(50, 500, 1000) ;
		NeffCoupledStripWg_400X220_COMSOL db = new NeffCoupledStripWg_400X220_COMSOL();
		double[] nEven = db.getNeffEven(1600, g) ;
		double[] nOdd = db.getNeffOdd(1600, g) ;
		MatlabChart fig = new MatlabChart() ;
		fig.plot(g, nEven);
		fig.plot(g,  nOdd, "r");
		fig.renderPlot();
		fig.run(true);
	}


}
