package photonics.wg.coupling;

import flanagan.interpolation.CubicSpline;
import mathLib.plot.MatlabChart;
import mathLib.util.MathUtils;

public class NeffCoupledStripWg_500X220_COMSOL {

	final static double LAMBDA_MIN = 1500 ;
	final static double LAMBDA_MAX = 1600 ;


	public double getNeffEven(double lambdaNm, double gapNm){
		double neffEven = Double.NaN ;
		double[] lambda_nm = MathUtils.linspace(LAMBDA_MIN, LAMBDA_MAX, 2.5) ;
		// step 1: find lambda_min and lambda_max interval
		int M = lambda_nm.length ;
		double lambdaMinInterval = Double.NaN ;
		double lambdaMaxInterval = Double.NaN ;
		int indexInterval = 0 ;
		for(int i=0; i<M-1; i++){
			if(lambdaNm>=lambda_nm[i] && lambdaNm<=lambda_nm[i+1]){
				lambdaMinInterval = lambda_nm[i] ;
				lambdaMaxInterval = lambda_nm[i+1] ;
				indexInterval = i ;
			}
		}
		double weightLeft = (lambdaNm-lambdaMinInterval)/(lambdaMaxInterval-lambdaMinInterval) ;
		double weightRight = 1 - weightLeft ;
		neffEven = (1-weightLeft)*getNeffFromDatabase(indexInterval, gapNm, "even") + (1-weightRight)*getNeffFromDatabase(indexInterval+1, gapNm, "even") ;

		return neffEven ;
	}

	public double[] getNeffEven(double lambdaNm, double[] gapNm){
		double[] neff = new double[gapNm.length] ;
		for(int i=0; i<neff.length; i++){
			neff[i] = getNeffEven(lambdaNm, gapNm[i]) ;
		}
		return neff ;
	}

	public double getNeffOdd(double lambdaNm, double gapNm){
		double neffEven = Double.NaN ;
		double[] lambda_nm = MathUtils.linspace(LAMBDA_MIN, LAMBDA_MAX, 2.5) ;
		// step 1: find lambda_min and lambda_max interval
		int M = lambda_nm.length ;
		double lambdaMinInterval = Double.NaN ;
		double lambdaMaxInterval = Double.NaN ;
		int indexInterval = 0 ;
		for(int i=0; i<M-1; i++){
			if(lambdaNm>=lambda_nm[i] && lambdaNm<=lambda_nm[i+1]){
				lambdaMinInterval = lambda_nm[i] ;
				lambdaMaxInterval = lambda_nm[i+1] ;
				indexInterval = i ;
			}
		}
		double weightLeft = (lambdaNm-lambdaMinInterval)/(lambdaMaxInterval-lambdaMinInterval) ;
		double weightRight = 1 - weightLeft ;
		neffEven = (1-weightLeft)*getNeffFromDatabase(indexInterval, gapNm, "odd") + (1-weightRight)*getNeffFromDatabase(indexInterval+1, gapNm, "odd") ;

		return neffEven ;
	}

	public double[] getNeffOdd(double lambdaNm, double[] gapNm){
		double[] neff = new double[gapNm.length] ;
		for(int i=0; i<neff.length; i++){
			neff[i] = getNeffOdd(lambdaNm, gapNm[i]) ;
		}
		return neff ;
	}

	// database of even and odd modes
	private double getNeffFromDatabase(int index, double gapNm, String mode){
		double neff = Double.NaN ;
		double[] gap = {50.0, 73.684210526315789474, 97.368421052631578947, 121.05263157894736842, 144.73684210526315789, 168.42105263157894737, 192.10526315789473684, 215.78947368421052632, 239.47368421052631579, 263.15789473684210526, 286.84210526315789474, 310.52631578947368421, 334.21052631578947368, 357.89473684210526316, 381.57894736842105263, 405.26315789473684211, 428.94736842105263158, 452.63157894736842105, 476.31578947368421053, 500.0} ;
		if(index == 0){
			double[] nEven = {2.5702062896450525997, 2.5490150112508036528, 2.536791358506353955, 2.5289710799482114645, 2.5236487085955490173, 2.5198824140717839271, 2.5171141492370243675, 2.5150494723378860051, 2.5134759968928288565, 2.5122648052413580899, 2.5113225410400010773, 2.5105836191041026595, 2.5100014536009913613, 2.509543142040163044, 2.5091762808649407113, 2.5088861348239861471, 2.508656351623786307, 2.5084692232867853434, 2.5083187832303357467, 2.5082009785181607064} ;
			double[] nOdd = {2.4881255278539651243, 2.490297159812812744, 2.4925851117317923133, 2.4948018628619776926, 2.4968428039148862219, 2.4986589229946742918, 2.5002295005755912349, 2.5015676684765382198, 2.5026901548072069126, 2.5036224403545168649, 2.5043902879602004674, 2.5050184227517195978, 2.5055312578978488069, 2.5059498787420833033, 2.5062869781573069439, 2.5065615703707626594, 2.5067853253557084159, 2.5069628388324112223, 2.5071055236814951961, 2.5072235381739016447} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 1){
			double[] nEven = {2.5679541753062999909, 2.5466205753791744115, 2.5343022475118721637, 2.5264152775238479798, 2.5210439772408563819, 2.5172407820744870932, 2.5144438459459426127, 2.5123566071654939158, 2.5107650595971651164, 2.5095392650999279738, 2.5085851059519517214, 2.507836424474779502, 2.5072462247621376541, 2.5067812805306655122, 2.5064089141656173965, 2.5061142146833192967, 2.5058806527894832428, 2.5056903688436831246, 2.5055372997358489329, 2.5054173226178861889} ;
			double[] nOdd = {2.485168120192428276, 2.4873480904153963955, 2.4896469378857277732, 2.4918761649742564579, 2.4939302956592306337, 2.4957596617024675467, 2.4973430220307428762, 2.4986931662369418206, 2.4998266130429214193, 2.5007687510905056705, 2.5015453252219872482, 2.5021810909374333498, 2.5027005534229647132, 2.5031248776636516595, 2.5034668485787401337, 2.5037455974163078665, 2.5039728764320119403, 2.5041533545643344105, 2.5042985317504271592, 2.5044186553362073333} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 2){
			double[] nEven = {2.5657047034483984049, 2.5442284299379736012, 2.5318150344413541397, 2.5238610185273300246, 2.5184404838444240937, 2.5146001301086307045, 2.5117743007553969825, 2.5096643134480989268, 2.5080545324672955942, 2.5068139967633999987, 2.5058478238580104147, 2.5050892782301739103, 2.5044909566491511121, 2.5040193002288635427, 2.5036413618231940781, 2.5033420544042521705, 2.503104660381061386, 2.5029111720696941568, 2.5027554380351211272, 2.5026332551291914363} ;
			double[] nOdd = {2.4822089057224525632, 2.4843972162908301016, 2.4867069868731168647, 2.4889487215112073848, 2.4910160886572665362, 2.4928587607754697508, 2.4944549704363012665, 2.4958171614785302772, 2.4969616456753951361, 2.497913708117390108, 2.4986990826645936181, 2.4993425514241418561, 2.499868707599913531, 2.5002987933869587067, 2.5006456907131648926, 2.5009286506982411069, 2.5011594982439948609, 2.5013429799942268339, 2.5014906864787591623, 2.5016129514091658415} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 3){
			double[] nEven = {2.5634578832359307121, 2.5418385819744102605, 2.5293297334295372636, 2.5213083131107527635, 2.5158382395866012438, 2.5119604652318834326, 2.509105524244794605, 2.5069725999259571125, 2.5053444240781757024, 2.5040890096243773044, 2.5031107023776155707, 2.5023421894474977556, 2.5017356535800723272, 2.5012572081938739821, 2.5008736272812570611, 2.5005696496967786402, 2.5003283719642253047, 2.5001316397096129407, 2.4999731968287970396, 2.4998487743649602244} ;
			double[] nOdd = {2.4792478773160708805, 2.4814445327680783038, 2.4837652381386003952, 2.4860195229278025941, 2.4881001731082181827, 2.4899562133217503224, 2.4915653343922321561, 2.4929396454802961181, 2.4940952409612653362, 2.4950573054409064255, 2.4958515541448598185, 2.4965027936201997782, 2.49703571163028748, 2.4974716192916099899, 2.4978235017116405814, 2.4981107183877138134, 2.4983451830329381771, 2.4985317122260619627, 2.498681982000270807, 2.4988064187800751448} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 4){
			double[] nEven = {2.5612137142643724985, 2.5394510444053919329, 2.5268463499267705963, 2.5187571762725435853, 2.5132372559714122318, 2.5093218039649407558, 2.5064375278917161438, 2.5042814776477997363, 2.5026347436323721496, 2.5013643100980424983, 2.5003737468633335794, 2.4995951604537522961, 2.4989803244721278119, 2.4984950100703295917, 2.4981057193442004483, 2.497797011959804081, 2.4975517968282399117, 2.4973517718776343521, 2.4971905834983503247, 2.4970638857265554655} ;
			double[] nOdd = {2.4762850225261687775, 2.4784900300767813697, 2.4808217019615836918, 2.4830885549285808267, 2.485182540420534103, 2.4870520034691581124, 2.4886741065088830993, 2.4900606092412744808, 2.4912273908997195626, 2.4921995301277095614, 2.4930027287104259415, 2.4936618095277585105, 2.4942015569444655476, 2.4946433493354307487, 2.4950002726205773307, 2.4952918030719417608, 2.4955299250736278083, 2.4957195441532840086, 2.4958724131920697609, 2.4959990541945229481} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 5){
			double[] nEven = {2.5589722021851204481, 2.5370658234661438435, 2.5243648987079905233, 2.5162076184945703083, 2.5106375469063202388, 2.5066841554756740251, 2.5037703237151132107, 2.5015909555524475927, 2.4999255032000227139, 2.4986399104211547417, 2.4976369692037989623, 2.4968482091133750167, 2.496224973655698065, 2.4957327100150794585, 2.4953376393824808765, 2.4950241407917572722, 2.494774936224312345, 2.4945715731664588333, 2.4944076004822144377, 2.4942785916055707496} ;
			double[] nOdd = {2.4733203348677368361, 2.4755336996204855282, 2.4778763502743776925, 2.4801558209419316547, 2.4822631824442957793, 2.4841461266111819484, 2.485781276832589537, 2.4871800451703824919, 2.4883580869651464873, 2.4893403805016403041, 2.4901525972771518802, 2.490819597462909929, 2.4913662382398644723, 2.4918139759526503063, 2.4921759983889439916, 2.4924718902062443782, 2.4927137204373788215, 2.4929064652896557597, 2.4930619761771950493, 2.4931908566356568713} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 6){
			double[] nEven = {2.5567333497919402241, 2.5346829292069834594, 2.5218853933105744858, 2.513659651217938773, 2.5080391229108784934, 2.5040475321862145641, 2.5011039205860261525, 2.4989010482298192883, 2.4972167098344506542, 2.4959158160387633352, 2.4949003765625938911, 2.4941013331118249141, 2.4934696090631374155, 2.4929703166434333816, 2.4925693930549681632, 2.4922510433407705221, 2.4919978000460125678, 2.4917910494133383992, 2.4916242475824783575, 2.4914928951998378537} ;
			double[] nOdd = {2.470353806524612672, 2.4725755312239061645, 2.4749291837717901643, 2.4772212976337288914, 2.4793420877119567436, 2.4812385720988112681, 2.4828868369741208255, 2.4842979413160177771, 2.4854873206146472775, 2.4864798411480983908, 2.487301156304191796, 2.4879761407200913226, 2.4885297426084029837, 2.4889834913419113249, 2.489350670283883904, 2.4896509778915620892, 2.4898965638492196462, 2.4900924805092752301, 2.4902506661103744889, 2.4903818198097189551} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 7){
			double[] nEven = {2.554497163665360393, 2.5323023705310205855, 2.5194078451121573181, 2.5111132888968605847, 2.5054420010988813772, 2.5014119490266470969, 2.4984383321269292288, 2.4962117631238474047, 2.4945083741233529118, 2.4931920390055601899, 2.4921639773046115884, 2.4913545433100914295, 2.4907142366912480291, 2.4902078349254868073, 2.4898009898504387394, 2.4894777249633714966, 2.4892203842436293471, 2.4890102015085133758, 2.4888405322051876389, 2.4887067984502433404} ;
			double[] nOdd = {2.4673854258167655651, 2.4696155186334509679, 2.4719801918462618318, 2.4742849867288492227, 2.4764192472683088653, 2.478329332175373434, 2.4799907774462370824, 2.481414291198478228, 2.4826150833447382382, 2.483617909126349943, 2.484448393988615944, 2.4851314378273166028, 2.485692074049764333, 2.4861518913101163797, 2.4865242847528747916, 2.4868290600829991988, 2.4870784494992892455, 2.4872775794135759675, 2.4874384807746019455, 2.4875719365316837361} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 8){
			double[] nEven = {2.5522636427663556447, 2.5299241593941506068, 2.5169322638540569947, 2.5085685480183652629, 2.5028461904453016551, 2.4987774165892520095, 2.4957735726637251261, 2.4935231124047687601, 2.4918005121057431595, 2.4904685889731861259, 2.4894277800920643351, 2.4886078495336749761, 2.4879588677373658534, 2.4874452687829204933, 2.4870324327547503884, 2.4867041911143554778, 2.4864426975465474534, 2.4862290376726696728, 2.4860564576717738561, 2.4859203071542466112} ;
			double[] nOdd = {2.4644151908510476545, 2.4666536514274994829, 2.4690293639107889767, 2.4713468722906291042, 2.4734946558085670887, 2.4754183963505518307, 2.477093090221435645, 2.4785290858497091016, 2.479741365694404287, 2.48075457350479045, 2.4815943055154128238, 2.4822854790932784574, 2.4828532108041883042, 2.4833191694121161675, 2.4836968349641859177, 2.4840061322118573983, 2.4842593754749575652, 2.4844617558175650096, 2.4846254127765652342, 2.4847612074005094307} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 9){
			double[] nEven = {2.5500327956654702533, 2.5275483015529962572, 2.5144586631557213074, 2.5060254380023483378, 2.5002517062282221261, 2.4961439483009448814, 2.4931096499061689009, 2.4908351096029295313, 2.4890931286287147906, 2.4877454748337277657, 2.4866917983104679379, 2.4858612591178670392, 2.4852035040487798767, 2.48468262974388443, 2.4842637297494722937, 2.4839304481850894568, 2.4836647516100640587, 2.4834475592646310105, 2.4832720275849116121, 2.4831334243532574568} ;
			double[] nOdd = {2.4614430861142779783, 2.4636899215903715898, 2.466076693125907493, 2.4684069513376321048, 2.4705683018994228917, 2.4725057574855493492, 2.4741937665149911219, 2.4756423168283201441, 2.4768661624986441083, 2.4778898273383651585, 2.4787388827788996437, 2.4794382589325034694, 2.4800131580853790325, 2.4804853177091223948, 2.4808683147052010831, 2.4811821877902726641, 2.4814393288548122207, 2.4816450132681326934, 2.4818114583990915634, 2.4819496280674768762} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 10){
			double[] nEven = {2.5478046242882905759, 2.5251748108969032103, 2.5119870567954682983, 2.5034839735276812611, 2.4976585613844610734, 2.4935115559152536413, 2.4904465807641327224, 2.4881477647908902817, 2.4863862348848981831, 2.4850227090525671692, 2.4839560313008934855, 2.4831147790621086457, 2.4824481574848711318, 2.4819199270883762765, 2.4814948861373142819, 2.4811565013791248013, 2.480886540813517005, 2.4806657792242425842, 2.4804872469201133534, 2.4803461531396107098} ;
			double[] nOdd = {2.4584691087384218378, 2.4607243229361781545, 2.4631221722796579066, 2.465465213360245933, 2.467640177643396715, 2.4695914060004988677, 2.4712927987040576028, 2.4727539760123034007, 2.4739894620214712972, 2.475023663079176206, 2.4758821150301359992, 2.4765897704389860934, 2.4771719056802252723, 2.4776503322003677887, 2.4780387200462534736, 2.4783572231245458717, 2.4786183099847898248, 2.4788273407500307499, 2.47899661700063767, 2.479137193198305944} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 11){
			double[] nEven = {2.54557913439968031, 2.5228036939300841901, 2.5095174555261801075, 2.5009441675152377371, 2.495066771461209143, 2.4908802575944721802, 2.4877843765248202068, 2.4854610887675026021, 2.4836798451116415265, 2.4823002990624849495, 2.4812204990561621543, 2.4803684233977865148, 2.4796928362697086001, 2.4791571629803921262, 2.4787259081785517623, 2.478382357177086881, 2.4781080794787908594, 2.4778836868711584529, 2.4777021216095000966, 2.4775585004809239642} ;
			double[] nOdd = {2.4554932484074085686, 2.4577568452789626541, 2.4601657925234401425, 2.4625216495204926836, 2.464710273356207626, 2.4666753359464750339, 2.4683901746602971983, 2.4698640547612047413, 2.4711112589552799435, 2.4721560738152135173, 2.4730240006388930496, 2.4737400067649994995, 2.4743294478290875915, 2.4748142038970240009, 2.4752080434732510739, 2.4755312304543948265, 2.4757963162043625793, 2.4760087362394536115, 2.4761808826923896731, 2.4763239020838927473} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 12){
			double[] nEven = {2.5433563257130415991, 2.5204349626782893701, 2.5070498717826676938, 2.4984060338244011845, 2.4924763491509991375, 2.4882500592160434749, 2.485123048250063249, 2.4827750970850517298, 2.4809739685061575898, 2.4795782589809123309, 2.4784852092958020719, 2.4776221936640294707, 2.4769375489084435316, 2.4763943476666052668, 2.4759568079671727681, 2.4756080239327107329, 2.4753293708072501289, 2.4751013013242149086, 2.4749166547183398812, 2.4747704672731494213} ;
			double[] nOdd = {2.4525154995427196347, 2.4547874816738248782, 2.4572075435941878041, 2.4595762512666667909, 2.4617785864736219104, 2.4637575372399354023, 2.4654858923178664121, 2.4669725467731535851, 2.4682315457837620265, 2.4692870515209688342, 2.4701645294332084113, 2.4708889577761561362, 2.4714857766382580806, 2.4719769276717213913, 2.4723762810340415008, 2.4727042065165485418, 2.4729733402975333512, 2.4731891943414341384, 2.4733642503128323575, 2.473509748152008747} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 13){
			double[] nEven = {2.5411362078617516502, 2.5180686241363789968, 2.5045843221673411705, 2.495869587665119127, 2.4898873079822112508, 2.4856209838289924363, 2.4824626138078014215, 2.4800898022467072757, 2.4782686209756090712, 2.4768565979517402909, 2.4757501685562450788, 2.4748761065343285459, 2.4741823049003781598, 2.4736314902149811878, 2.4731875898181607809, 2.4728335047535470181, 2.4725504198130709987, 2.472318623382972369, 2.4721308527218286422, 2.4719820608769880188} ;
			double[] nOdd = {2.4495358541127187912, 2.4518162194888710737, 2.4542474221005998736, 2.456629011934472917, 2.45884510270785972, 2.4608380014600967911, 2.4625799397109351396, 2.4640794422670619923, 2.4653503109439465213, 2.4664165862981857202, 2.4673036938323122946, 2.4680366217473572732, 2.4686408872322309627, 2.4691385022274836558, 2.4695434274581313794, 2.4698761461067273437, 2.4701493804479008887, 2.4703687123318549546, 2.470546719197761476, 2.4706947330934556639} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 14){
			double[] nEven = {2.5389187809295155063, 2.5157046916754923771, 2.5021208098089435801, 2.4933348416684659732, 2.487299662927895838, 2.4829930408885347859, 2.4798030819085612464, 2.4774052140768865193, 2.47556381009836457, 2.4741353271156270033, 2.4730153909206564755, 2.4721301694165451757, 2.471427111265240395, 2.4708685948649922182, 2.4704182594979586796, 2.4700588111017411919, 2.4697712359424786044, 2.4695356630586275948, 2.4693447217454225218, 2.4691932840287655893} ;
			double[] nOdd = {2.4465543047666331589, 2.448843070164884228, 2.4512854166639796993, 2.4536799232629062928, 2.4559098154763958632, 2.457916720367936847, 2.4596723103407569511, 2.4611847349963231757, 2.4624675539563867233, 2.4635446749395000232, 2.4644414881697116471, 2.4651829888204077612, 2.4657947741371133432, 2.4662989148702694209, 2.46670947667756435, 2.4670470479745314485, 2.4673244308745885256, 2.4675472856124640586, 2.4677282864698839582, 2.4678788499482950947} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 15){
			double[] nEven = {2.536704050239323216, 2.5133431768273264417, 2.4996593668846092129, 2.4908018093882962063, 2.4847134280116254246, 2.4803662422365602147, 2.4771444699124773869, 2.4747213488475048315, 2.4728595487061295621, 2.4714144585705217771, 2.4702808881577129618, 2.4693843907691852557, 2.4686719797080747263, 2.4681056793679618799, 2.4676488292248897061, 2.4672839489466187324, 2.4669918247017066371, 2.4667524216111460511, 2.4665582656826590124, 2.466404148309589317} ;
			double[] nOdd = {2.4435708433161935638, 2.445867997722252607, 2.4483215242900224773, 2.4507289784658756737, 2.4529727201209805543, 2.4549936899242381649, 2.4567629990478700996, 2.4582884168761776067, 2.4595832624569342606, 2.4606713100169463893, 2.4615779062869442839, 2.4623280542693684048, 2.4629474300578371171, 2.4634581677271718547, 2.4638744227779207918, 2.4642169038870984643, 2.4644984866710686333, 2.4647249134513184998, 2.4649089441235654263, 2.4650620973388908119} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 16){
			double[] nEven = {2.5344920199007376915, 2.5109840802345990696, 2.4971999858634563729, 2.4882705089190975123, 2.4821286205500681099, 2.4777406080854431636, 2.4744867904633247591, 2.4720382184443630003, 2.4701558542596000478, 2.468694005615774234, 2.4675466683410078872, 2.4666387853568263466, 2.4659169171627337569, 2.465342745084927234, 2.4648793042382983742, 2.4645089242059796675, 2.4642121929518134849, 2.4639689083371201228, 2.4637714929897853722, 2.4636146533825691307} ;
			double[] nOdd = {2.4405854642228597129, 2.4428910226182067866, 2.4453557331038617839, 2.4477761706599365787, 2.4500338076368506357, 2.4520688990350074654, 2.4538519921039054772, 2.4553904806101667369, 2.456697429426188517, 2.4577964821974744858, 2.4587129399553049325, 2.459471813889403613, 2.4600988507360508351, 2.4606162511234908052, 2.4610382661113554548, 2.4613857090808166639, 2.4616715444831505089, 2.4619015886870760923, 2.4620886961710644059, 2.462244472968411646} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 17){
			double[] nEven = {2.5322826937163207539, 2.5086274208820724674, 2.4947426888663102318, 2.4857409522518101319, 2.4795452517528917546, 2.4751161496068698753, 2.4718300583459389408, 2.4693558376588580217, 2.4674527345218320029, 2.4659739778773879237, 2.4648127439424150076, 2.4638933571590553306, 2.4631619343623749607, 2.4625798040699762304, 2.462109693684570999, 2.4617337479999918948, 2.4614323485773903499, 2.4611851315923347627, 2.4609844087560510673, 2.4608248063243003401} ;
			double[] nOdd = {2.4375981623563172107, 2.4399121209845500147, 2.4423880375962663258, 2.4448214902822238415, 2.4470930685734559873, 2.4491423405928598456, 2.4509392896240784765, 2.4524909193304038624, 2.4538100500306341267, 2.4549201859889921984, 2.4558465846790902276, 2.4566142579070144869, 2.4572490301819995828, 2.4577731616855427177, 2.4582009950647645269, 2.458553463962001473, 2.4588436024165156724, 2.4590773101593725869, 2.4592675352459556493, 2.4594259763518304673} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 18){
			double[] nEven = {2.5300760743836403499, 2.5062732051859839544, 2.4922874913407464526, 2.4832131545143716345, 2.476963338540746129, 2.4724928827319159197, 2.4691742897560180481, 2.4666742184847123553, 2.4647502044599138848, 2.4632543901051588975, 2.4620791284148677569, 2.4611481251342688381, 2.4604070461360687538, 2.4598168627742342807, 2.4593400089455421664, 2.4589584272192359649, 2.4586522983740231041, 2.4584010962873148465, 2.4581970208947927503, 2.4580346135082247194} ;
			double[] nOdd = {2.4346089282108698271, 2.4369312895859827073, 2.4394184340092142094, 2.4418649321067769087, 2.4441504986332018845, 2.4462140102973646272, 2.4480248774337454165, 2.4495897248553650805, 2.4509211143206091066, 2.4520424155028228697, 2.4529788325200736487, 2.453755383223390929, 2.454397961777710524, 2.4549288910339961411, 2.4553626104904000549, 2.4557201573327063215, 2.4560146549758967716, 2.4562520758183805647, 2.4564454582134134242, 2.4566066004625275454} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 19){
			double[] nEven = {2.5278721696017782961, 2.5039214464797865389, 2.4898344029964758484, 2.4806871289462160135, 2.4743828989215077563, 2.469870822861040871, 2.4665194944145372169, 2.4639933765799311161, 2.4620482794019764583, 2.4605352545755998506, 2.4593458308649958077, 2.4584030970703998342, 2.4576522557777789046, 2.4570539341936727951, 2.456570256653572315, 2.4561829670071610998, 2.4558720529590218895, 2.4556168093294274968, 2.4554093335839892731, 2.4552440825063963636} ;
			double[] nOdd = {2.4316177567989964992, 2.4339485234866895524, 2.4364469097118566232, 2.4389064889141947035, 2.441206089603976892, 2.4432838990413925373, 2.4451087520692200705, 2.4466868919634481294, 2.4480306200628967339, 2.4491631630613102111, 2.4501096789863372472, 2.4508951834243490886, 2.4515456402626552013, 2.4520834368524186964, 2.4525231061173831115, 2.4528857886989130499, 2.4531846993682489, 2.4534258792010645855, 2.453622464940158121, 2.4537863458715927223} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 20){
			double[] nEven = {2.5256709772821590576, 2.5015721527758234544, 2.4873834374777756828, 2.4781628945122986529, 2.4718039455530891324, 2.4672499852183471525, 2.4638656928646658351, 2.4613133270814122611, 2.4593469712309472541, 2.4578165847194490823, 2.4566128648380125554, 2.4556582819323216071, 2.4548975810451603152, 2.4542910264871120596, 2.4538004458881434999, 2.4534073833951399735, 2.4530916190026630375, 2.4528322797218935492, 2.4526213570766581817, 2.4524532207257299099} ;
			double[] nOdd = {2.4286246426795621289, 2.4309638146460854635, 2.4334734533408015622, 2.435946151770116419, 2.4382598335478777862, 2.4403519953589931646, 2.4421909064284479385, 2.4437824114923452079, 2.4451385568341952315, 2.446282423723752153, 2.4472391167490852304, 2.4480336513270692933, 2.4486920595191752348, 2.4492367962042456142, 2.4496824752959058813, 2.4500503572477478897, 2.4503537320575867753, 2.4505987205056389833, 2.4507985525441693397, 2.4509652127970658064} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 21){
			double[] nEven = {2.5234725116782890098, 2.499225333116511738, 2.4849346121134008314, 2.4756404632839412727, 2.4692264942701607211, 2.4646303853459339273, 2.4612128966147941433, 2.4586340839623446186, 2.4566462934021173758, 2.4550983921813811506, 2.4538802456497337268, 2.452913689818205345, 2.4521430272451247845, 2.4515281537285127378, 2.4510305894994717235, 2.4506316799729814804, 2.4503110037218784889, 2.4500475164186461541, 2.4498330991530501421, 2.4496620326108309307} ;
			double[] nOdd = {2.4256295837182255681, 2.4279771593420997888, 2.4304980861597700326, 2.4329839181807932924, 2.4353117262240226992, 2.437418301982969826, 2.4392713351351451578, 2.4408762790507876339, 2.4422449200570772732, 2.4434001903673929768, 2.4443671401007258659, 2.4451707819492205509, 2.4458372207445489011, 2.4463889599291390731, 2.4468407178804549851, 2.4472138570220320908, 2.4475217498969521479, 2.4477705947127232911, 2.4479737186093557533, 2.4481431968160340951} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 22){
			double[] nEven = {2.5212767615448097303, 2.4968810005228729842, 2.4824879349399271433, 2.4731198524041175801, 2.4666505613648159745, 2.4620120415736050923, 2.4585611258148198921, 2.4559556623189799929, 2.4539462622308070294, 2.4523806913931749385, 2.4511479825582327408, 2.450169347130367381, 2.4493886090891012763, 2.4487653244668781127, 2.4482606938488173931, 2.4478558682705227056, 2.4475302157794160962, 2.4472625248168600187, 2.4470445629762891393, 2.4468705270919510752} ;
			double[] nOdd = {2.4226325599768179231, 2.4249885488228204444, 2.427520768934192219, 2.4300197783297017295, 2.4323617586293933002, 2.4344828062394610058, 2.4363500300584268743, 2.4379684886944121835, 2.4393497025301242864, 2.4405164562509535919, 2.4414937447375777424, 2.4423065753896340269, 2.4429811117500759288, 2.4435399284530223696, 2.4439978279888605606, 2.4443762833711932814, 2.4446887513149744287, 2.4449415028290806262, 2.4451479607343222789, 2.445320296038647534} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 23){
			double[] nEven = {2.5190837447296559048, 2.4945391629065878369, 2.4800434241773050559, 2.470601080488006307, 2.4640761629933347621, 2.4593949653026361268, 2.4559103918996409988, 2.4532780764989081668, 2.4512468904688478055, 2.4496634972938653441, 2.4484160898245583837, 2.4474252415533057636, 2.4466343371910985738, 2.4460025484892011782, 2.4454907716325609002, 2.4450799578758077857, 2.4447492674639867971, 2.4444773171984177651, 2.4442557615664529544, 2.4440787114764863652} ;
			double[] nOdd = {2.4196335815385676682, 2.4219979801665987296, 2.4245415042223790181, 2.4270537276631913848, 2.4294099247611966597, 2.4315455024443615173, 2.4334269828726196039, 2.4350590314698479233, 2.4364528980847439676, 2.4376312179689354487, 2.4386189221008103267, 2.4394410128313301911, 2.4401237311532910645, 2.4406896952633085895, 2.4411538021462364512, 2.4415376353252584707, 2.4418547299271842199, 2.4421114379234429848, 2.442321277517387923, 2.4424965080810481233} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 24){
			double[] nEven = {2.5168934584126105847, 2.4921998342631122014, 2.4776010917037787351, 2.4680841515978335643, 2.4615033171143085866, 2.4567791791445845462, 2.4532607131779848864, 2.4506013441159510968, 2.4485481923994751874, 2.4469468233302258398, 2.4456845802600537532, 2.4446814108869898696, 2.4438802249324957927, 2.4432398357579563353, 2.4427208327448224345, 2.4423039578389116322, 2.4419681683718237331, 2.4416918990056450944, 2.4414667011860937684, 2.44128659384515867} ;
			double[] nOdd = {2.4166326359080070318, 2.4190054458470351406, 2.4215602968614415857, 2.424085760037537618, 2.4264562201918824513, 2.4286063845953229645, 2.4305021934038752995, 2.432147903557945412, 2.4335545016030040166, 2.4347444675693301619, 2.4357426706962659324, 2.4365741042634714297, 2.4372650731427181192, 2.4378382550080268665, 2.4383086358144443473, 2.4386979080859050306, 2.4390196865883675414, 2.4392804038798301391, 2.4394936657932477786, 2.4396718377999642158} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 25){
			double[] nEven = {2.5147059099037671892, 2.4898630201161835451, 2.4751609577435971232, 2.4655690932886606959, 2.4589320397985923172, 2.4541646953462130654, 2.4506121047336617558, 2.447925479094347434, 2.4458501857728220941, 2.444230682045387848, 2.442953469393366106, 2.4419378528676336515, 2.4411262806429836481, 2.4404771989771347762, 2.4399508871246560204, 2.4395278795394848004, 2.4391869246595847542, 2.4389062821621299015, 2.4386773906888481456, 2.4384941824200123683} ;
			double[] nOdd = {2.4136297186953425964, 2.4160109396447482233, 2.4185771394204049756, 2.4211158681936320036, 2.4235006380867969433, 2.4256654448186591999, 2.4275756456635790848, 2.4292350959514465991, 2.4306545070404315112, 2.4318561984340827387, 2.4328649811778335632, 2.4337058379205207537, 2.4344051353451110487, 2.4349856061506738314, 2.4354623281434202298, 2.43585709909901027, 2.4361836166154442473, 2.4364483924110551527, 2.4366651245985826435, 2.4368462769541388013} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 26){
			double[] nEven = {2.5125210988307697946, 2.4875287345398433558, 2.4727230234856771851, 2.463055916355872732, 2.4563623444355004999, 2.4515515278292960843, 2.4479645815390167485, 2.445250498221895441, 2.4431528916949942776, 2.4415150937979075429, 2.4402227695215787939, 2.4391945866487549921, 2.4383725234464930232, 2.4377146599027352813, 2.4371809489733520238, 2.4367517316231821489, 2.4364055447689865197, 2.4361204753001164391, 2.4358878380827442278, 2.4357014803832970351} ;
			double[] nOdd = {2.410624823011755069, 2.4130144581020798178, 2.4155920138288613508, 2.4181440468642207975, 2.4205431711479037382, 2.4227226793735212595, 2.4246473432265269743, 2.4263206061294271265, 2.4277529105144139976, 2.4289664091569682647, 2.4299858519356445363, 2.430836206965623969, 2.4315439120951558571, 2.4321317438502929598, 2.4326148723609448687, 2.4330152038691332805, 2.4333465195024213124, 2.4336154047151223878, 2.4338356533687925953, 2.434019825382886193} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 27){
			double[] nEven = {2.5103390356311110487, 2.4851969861862079902, 2.4702873123390332033, 2.4605446393638303881, 2.4537942510123054163, 2.4489397010144675626, 2.4453181667183065962, 2.4425764157882903227, 2.4404563054125514299, 2.4388000638311475576, 2.4374924954759444873, 2.4364516265990632249, 2.4356189599406907753, 2.4349522142373194455, 2.4344110254893327472, 2.4339755283287267673, 2.4336240439630327792, 2.4333344820794473584, 2.4330980531120411925, 2.432908503482870799} ;
			double[] nOdd = {2.4076179489429554437, 2.4100159936514313763, 2.4126049236646363028, 2.4151702909585210932, 2.4175838153868673963, 2.4197780820576770822, 2.4217172751359341554, 2.4234044256678184404, 2.4248496984055694092, 2.426075091349495505, 2.4271052758065088106, 2.4279652147150247998, 2.4286813987314928021, 2.4292766637358469417, 2.4297662665914150359, 2.4301722218863348601, 2.4305083923988752836, 2.4307814370596267928, 2.431005249782383526, 2.4311924881802684517} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 28){
			double[] nEven = {2.5081597169008649217, 2.4828677892975492547, 2.4678538354549788281, 2.4580352776101750401, 2.4512277756022764486, 2.4463292262074798344, 2.4426728700151354445, 2.4399032522562249525, 2.4377604618598107677, 2.4360856162525719171, 2.4347626619823019567, 2.4337089780091698543, 2.4328656062906053315, 2.4321898838819002719, 2.4316411324536910676, 2.4311992779086049055, 2.4308424322859605304, 2.4305483219478962731, 2.4303080489591333269, 2.4301152615364602916} ;
			double[] nOdd = {2.4046090854146653371, 2.4070155430093049809, 2.4096158626830730398, 2.4121945939441991058, 2.4146225651547181812, 2.4168316486894885209, 2.4187854357378024694, 2.4204865518949523207, 2.4219448744586418165, 2.4231822413484769285, 2.4242232498924596307, 2.4250928494081454012, 2.4258175945092390613, 2.4264203619872688478, 2.4269165068470139879, 2.4273281499304975029, 2.427669232316131076, 2.4279464881725711933, 2.4281739125377903576, 2.4283642543830108451} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 29){
			double[] nEven = {2.5059831517692328084, 2.4805411460493647091, 2.4654226177695646172, 2.4555278477020099359, 2.4486629365200274222, 2.4437201226739100335, 2.4400287125435431435, 2.4372310204143419199, 2.435065373786041043, 2.433371763134108523, 2.4320332810824498715, 2.4309666633962718763, 2.4301124753162515191, 2.4294276787826802888, 2.4288712794914424364, 2.4284229938653627556, 2.4280607140197414395, 2.4277620008455658152, 2.4275178275189790433, 2.4273217580556778472} ;
			double[] nOdd = {2.4015982339001391566, 2.4040131004042208929, 2.4066248263300784593, 2.4092169527054698719, 2.4116594132164586028, 2.4138833710391010001, 2.4158518227351439833, 2.41756697717826885, 2.4190384296423008692, 2.4202878502754883172, 2.4213397669752239061, 2.4222191070071703578, 2.4229524843392420408, 2.4235628344113226973, 2.4240655951464771256, 2.4244829854078462361, 2.4248290381915720282, 2.4251105595984472352, 2.4253416398261746778, 2.4255351308001933397} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 30){
			double[] nEven = {2.5038093414881559262, 2.4782170780733911997, 2.4629936586944172205, 2.453022364831110913, 2.4460997509455681964, 2.4411124114456668188, 2.4373857093560546971, 2.4345597410830177587, 2.4323710535181595205, 2.4306585210759497073, 2.4293043710823192249, 2.4282246987966984442, 2.4273595799507079462, 2.4266656141609916908, 2.4261014781351346592, 2.4256466826045612883, 2.4252789093641613505, 2.4249755265982124719, 2.4247274020672113792, 2.4245280032286915528} ;
			double[] nOdd = {2.4015982339001391566, 2.4040131004042208929, 2.4066248263300784593, 2.4092169527054698719, 2.4116594132164586028, 2.4138833710391010001, 2.4158518227351439833, 2.41756697717826885, 2.4190384296423008692, 2.4202878502754883172, 2.4213397669752239061, 2.4222191070071703578, 2.4229524843392420408, 2.4235628344113226973, 2.4240655951464771256, 2.4244829854078462361, 2.4248290381915720282, 2.4251105595984472352, 2.4253416398261746778, 2.4255351308001933397} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 31){
			double[] nEven = {2.5016382914575818752, 2.4758955881973996327, 2.4605669833370202859, 2.450518846114527971, 2.4435382357109420859, 2.4385061045133835655, 2.4347438812108879169, 2.4318894258196337432, 2.4296775204157192718, 2.4279459042177666817, 2.4265759486797930933, 2.425483089399705694, 2.4246069349960714945, 2.4239037027856613626, 2.4233317438021648726, 2.4228703638885225047, 2.4224970239632686031, 2.4221889138497338934, 2.4219367855551774404, 2.4217340171574992524} ;
			double[] nOdd = {2.3955705394693538324, 2.3980022227212605124, 2.4006368066686567531, 2.4032558092913243186, 2.4057273814368231868, 2.4079812621788150295, 2.4099792468369654053, 2.4117227033293113792, 2.4132206586613635935, 2.4144944368774088339, 2.4155684159895853824, 2.4164674833496304629, 2.4172183637797264311, 2.4178440963959553223, 2.418360284296582563, 2.4187893669369300298, 2.4191455336286717959, 2.4194357489585298637, 2.4196742922252760799, 2.419874211833983324} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 32){
			double[] nEven = {2.4994700052921481337, 2.4735766860720076465, 2.4581425870014506074, 2.4480173102586961775, 2.440978408664943089, 2.4359012267534039253, 2.4321032432338167695, 2.4292200992222294786, 2.4269847904834773722, 2.4252339306279937503, 2.4238480255908219085, 2.4227418597372167852, 2.4218545544256069313, 2.4211419526119342116, 2.4205620875318660801, 2.4200940429663075903, 2.4197150716120110481, 2.4194021753068453151, 2.4191459857100441333, 2.4189397863921291432} ;
			double[] nOdd = {2.3925536886276552728, 2.3949937798182161508, 2.3976398083737553435, 2.4002723011955167109, 2.40275849647543982, 2.4050274215522962074, 2.4070402742739593904, 2.4087979940558907899, 2.4103093235197254884, 2.4115954055700639103, 2.4126805392005721274, 2.4135895910812288356, 2.414349342632623685, 2.4149828751981106123, 2.4155058846657442295, 2.4159409099472761717, 2.4163022243094260944, 2.4165968635621282168, 2.4168392141211598734, 2.4170424117857502999} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 33){
			double[] nEven = {2.4973044855529056285, 2.4712603883182793219, 2.4557205140833784363, 2.4455177718903695627, 2.4384202884228454167, 2.433297791610377736, 2.4294638156151378006, 2.426551774345327317, 2.4242928818924833756, 2.4225226169177225266, 2.4211206196141938918, 2.4200010174081532099, 2.4191024517601320554, 2.4183803864223127889, 2.4177925230812795654, 2.4173177376621111101, 2.41693306315052725, 2.41661531662836504, 2.4163550143841332485, 2.4161453432033863642} ;
			double[] nOdd = {2.3895348326780094794, 2.3919833271061330393, 2.3946408144336635004, 2.3972868257116215496, 2.3997876891845324465, 2.4020717179874404579, 2.4040995046533382151, 2.4058715657093254769, 2.4073963469155068573, 2.4086948149842348776, 2.4097911889181222733, 2.4107103094909860808, 2.4114790086412711823, 2.4121204192760647977, 2.4126503186550860569, 2.4130913514951024545, 2.4134578737928715775, 2.4137569943591077326, 2.414003200620164602, 2.4142097187402615788} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 34){
			double[] nEven = {2.4951417361416923235, 2.4689467029644109886, 2.4533007631615824096, 2.4430202454434226667, 2.4358638902205083099, 2.4306958154404800787, 2.4268256152209333187, 2.423884470640320199, 2.4216018083122237137, 2.4198119791329135708, 2.4183937486695654684, 2.4172605837117155936, 2.4163506430720964602, 2.4156190138926807442, 2.4150230637659118038, 2.4145414584624780296, 2.4141510106950350156, 2.4138283543898211292, 2.4135638810440922519, 2.4133506898205547841} ;
			double[] nOdd = {2.386513965192182507, 2.3889708614985880608, 2.3916398328092483005, 2.3942993843435975698, 2.3968149580375230911, 2.3991141462411746943, 2.4011569353329811349, 2.4029434129790185892, 2.4044817269926630487, 2.4057926647051597335, 2.4069003623876885634, 2.4078296318846361679, 2.4086073605781752605, 2.4092567233516222203, 2.4097935827259906461, 2.4102406889576299953, 2.4106124796639289976, 2.4109161370161902305, 2.4111662418439689937, 2.4113761371265853839} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 35){
			double[] nEven = {2.4929817643549316841, 2.4666356396784574478, 2.4508833519951367386, 2.440524756903831971, 2.4333092366959951924, 2.4280953220297192274, 2.4241886590659933454, 2.4212182061839317981, 2.4189115922080284271, 2.417102033467050326, 2.4156674245145404178, 2.4145205702302323658, 2.4135991436865262827, 2.412857846968615938, 2.4122537220805555513, 2.4117652200860382194, 2.4113689266950522061, 2.4110412968322205707, 2.4107726005335123887, 2.4105558374273861055} ;
			double[] nOdd = {2.3834910840988934311, 2.385956379951400752, 2.3886368378315272487, 2.3913099611737682615, 2.3938402944727612542, 2.3961547059037662244, 2.3982125600431847268, 2.4000135286855406314, 2.4015654559046533123, 2.4028889486646112239, 2.4040080524876117352, 2.4049475560667112894, 2.4057343935833670479, 2.4063917842384725532, 2.4069356783715236681, 2.4073889226431774979, 2.4077660402788789717, 2.4080742918802795494, 2.408328351545247159, 2.4085416591052326574} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 36){
			double[] nEven = {2.4908245689108077237, 2.4643272104476223738, 2.4484682871429552797, 2.4380313169533254225, 2.430756343434233635, 2.4254963268700029388, 2.4215529719667472364, 2.4185529987637548466, 2.4162222497969350066, 2.4143928002826600121, 2.4129416684744184884, 2.4117809971147936565, 2.4108479686755561744, 2.4100969043110440637, 2.4094845112612026661, 2.4089890302896077579, 2.4085868242164547581, 2.408254156350245534, 2.4079811802229151851, 2.4077607984927813511} ;
			double[] nOdd = {2.3804661841129028943, 2.3829398781905664073, 2.3856318412147858865, 2.3883185662835537677, 2.3908636992454663783, 2.3931933787066963504, 2.3952663749152653949, 2.3970819104294762703, 2.3986475336023240779, 2.3999836642616325655, 2.4011142596012704509, 2.4020640787803966276, 2.4028601028219980229, 2.4035255999058540155, 2.4040765968237276518, 2.4045360500631365319, 2.4049185572768778663, 2.4052314552897740008, 2.4054895216944816028, 2.4057062912863069748} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 37){
			double[] nEven = {2.4886701576161502913, 2.4620214244181113372, 2.4460555912994799144, 2.4355399416424523551, 2.4282052307242092404, 2.4228988493986838293, 2.4189185650087963175, 2.4158888672345426585, 2.4135337992945657959, 2.4116842961582496407, 2.4102164956549714248, 2.4090418769707859781, 2.4080971339507777351, 2.4073362011626704415, 2.406715451923413962, 2.4062129093564457172, 2.4058047194861109652, 2.4054669476683616658, 2.4051896357810789162, 2.4049655820122719518} ;
			double[] nOdd = {2.3774392649613274031, 2.379921351225264825, 2.382624832260653136, 2.3853251885443418345, 2.3878851647074132991, 2.390230175907029242, 2.3923183769600626647, 2.3941485536400777256, 2.3957279541511824483, 2.3970768038901391073, 2.3982189777221849525, 2.3991791952397849563, 2.3999844910621441763, 2.4006581698908182609, 2.4012163421911414396, 2.4016820698400560552, 2.4020700287169911569, 2.4023876315957690686, 2.4026497566246280968, 2.4028700321151723607} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 38){
			double[] nEven = {2.4865185313299780212, 2.4597182933111017, 2.4436452756748563431, 2.4330506532339168935, 2.4256559164313218346, 2.4203029108172939843, 2.4162854616501232563, 2.4132258314051888703, 2.4108462597545781136, 2.4089765368695528203, 2.4074919212437495553, 2.4063032268491939547, 2.4053466528897144983, 2.4045757487374594952, 2.4039465535801607388, 2.4034368695684729111, 2.4030226192708248334, 2.402679681069592732, 2.4023979763029092993, 2.4021702027674676216} ;
			double[] nOdd = {2.374410323752123908, 2.3769008000944604753, 2.3796158067116173207, 2.3823298256721043842, 2.3849046875449957383, 2.3872650858657129547, 2.3893685568060960556, 2.3912134542099616752, 2.3928067115863389525, 2.3941683700189515527, 2.3953222039425847711, 2.3962929060110935708, 2.3971075533937189483, 2.3977894889627155983, 2.398354911401093581, 2.3988269796980858928, 2.3992204526865195113, 2.3995428194253483056, 2.3998090532089095817, 2.4000328848540122273} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 39){
			double[] nEven = {2.4843696962403298834, 2.4574178287353900529, 2.4412373666633500058, 2.4305634653803958045, 2.4231084169939021145, 2.4177085301220992974, 2.4136536839900326612, 2.410563911378167834, 2.408159648761158067, 2.4062695432819958263, 2.4047679669152683957, 2.4035650672860975341, 2.4025965451668893635, 2.4018155641103287046, 2.4011778286817433425, 2.4006609225013120223, 2.4002405408926796859, 2.3998923767444457766, 2.3996062184104762771, 2.3993746719152695412} ;
			double[] nOdd = {2.3713793555778641675, 2.3738782162427969347, 2.3766047680351487514, 2.3793324735952561255, 2.3819222645344537703, 2.384298103700075, 2.3864169184927166434, 2.3882766068483856081, 2.3898838067056846768, 2.3912583536043348076, 2.3924239362048860258, 2.3934052011183832853, 2.3942292842898589278, 2.3949195579145610147, 2.3954923025308594298, 2.3959707790296222996, 2.396369832394491528, 2.3966970165033263385, 2.3969674108082146269, 2.3971948467956902817} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		else if(index == 40){
			double[] nEven = {2.4822236526123195866, 2.455120039249547137, 2.4388318652225229322, 2.4280783974339916753, 2.4205627560873179682, 2.4151157251954704641, 2.4110232469785288778, 2.4079031234136825113, 2.4054739853108735304, 2.4035633330557963916, 2.4020446498662688661, 2.400827411294356839, 2.3998468250271010049, 2.3990556667123961176, 2.3984093002254600613, 2.3978850866822720711, 2.3974584994201562083, 2.3971050367840214257, 2.3968143704451740916, 2.3965789987819454687} ;
			double[] nOdd = {2.3683463599046294945, 2.3708536035971081724, 2.3735917055727955294, 2.3763331270644005855, 2.3789378911862235633, 2.3813292321151018349, 2.3834634517128074904, 2.3853380098724805691, 2.3869592289602006296, 2.3883467541467555684, 2.389524167662016918, 2.3905160885719163311, 2.3913496822147690679, 2.3920483708464668204, 2.3926285121943329237, 2.3931134686265886913, 2.3935181587073568465, 2.3938502257373670545, 2.3941248329626265701, 2.3943559197702577457} ;
			CubicSpline interpolate_even = new CubicSpline(gap, nEven) ;
			CubicSpline interpolate_odd = new CubicSpline(gap, nOdd) ;
			if(mode.toLowerCase() == "even"){neff = interpolate_even.interpolate(gapNm) ;} else{neff = interpolate_odd.interpolate(gapNm) ;}
		}
		return neff ;

	}


	// for test *******
	public static void main(String[] args){
		double[] g = MathUtils.linspace(50, 500, 1000) ;
		NeffCoupledStripWg_500X220_COMSOL db = new NeffCoupledStripWg_500X220_COMSOL();
		double[] nEven = db.getNeffEven(1600, g) ;
		double[] nOdd = db.getNeffOdd(1600, g) ;
		MatlabChart fig = new MatlabChart() ;
		fig.plot(g, nEven);
		fig.plot(g,  nOdd, "r");
		fig.renderPlot();
		fig.run(true);
	}


}
